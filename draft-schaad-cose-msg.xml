<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2104 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2104.xml" >
<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml" >

  <!ENTITY RFC3394 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3394.xml" >
  <!ENTITY RFC3447 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3447.xml" >
  <!ENTITY RFC3610 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3610.xml" >
  <!ENTITY RFC4231 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4231.xml" >
  <!ENTITY RFC5480 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5480.xml" >
  <!ENTITY RFC5652 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5652.xml" >
  <!ENTITY RFC5752 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5752.xml" >
  <!ENTITY RFC5869 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5869.xml" >
  <!ENTITY RFC5990 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5990.xml" >
  <!ENTITY RFC6090 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6090.xml" >
  <!ENTITY RFC6151 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6151.xml" >
  <!ENTITY RFC7049 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7049.xml" >
  <!ENTITY RFC7159 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7159.xml" >
  <!ENTITY RFC7515 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7515.xml" >
  <!ENTITY RFC7516 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7516.xml" >
  <!ENTITY RFC7517 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7517.xml" >
  <!ENTITY RFC7518 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7518.xml" >

  <!ENTITY CDDL SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.greevenbosch-appsawg-cbor-cddl.xml" >
  <!ENTITY CBCMAC SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.mcgrew-aead-aes-cbc-hmac-sha2.xml" >
  <!ENTITY CFRG-EC SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.irtf-cfrg-curves.xml" >

<!ENTITY Triple-01 SYSTEM "includes/Triple-01.xml">
<!ENTITY Enc-01 SYSTEM "includes/Enc-01.xml">
<!ENTITY Mac-01 SYSTEM "includes/Mac-01.xml">
<!ENTITY Mac-02 SYSTEM "includes/Mac-02.xml">
<!ENTITY Mac-03 SYSTEM "includes/Mac-03.xml">
<!ENTITY Sig-01 SYSTEM "includes/Sig-01.xml">
<!ENTITY Sig-02 SYSTEM "includes/Sig-02.xml">

]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc comments="yes"?>

<rfc ipr="trust200902" docName="draft-schaad-cose-msg-latest" category="info">
  <front>
    <title>CBOR Encoded Message Syntax</title>

    <author initials="J." surname="Schaad" fullname="Jim Schaad">
      <organization>August Cellars</organization>
      <address>
        <email>ietf@augustcellars.com</email>
      </address>
    </author>

    <date/>

    <area>Security</area>
    <workgroup>COSE Working Group</workgroup>
    <abstract>
      <t>
        Concise Binary Object Representation (CBOR) is data format designed for small code size and small message size.
        There is a need for the ability to have the basic security services defined for this data format.
        This document specifies how to do signatures, message authentication codes and encryption using this data format.
      </t>
    </abstract>

    <note title="Contributing to this document">
      <t>
        The source for this draft is being maintained in GitHub.
        Suggested changes should be submitted as pull requests  at https://github.com/cose-wg/cose-spec.
        Instructions are on that page as well.
        Editorial changes can be managed in GitHub, but any substantial issues need to be discussed on the COSE mailing list.
      </t>
    </note>
  </front>

  <middle>

    <section anchor="introduction" title="Introduction">

      <t>
        There has been an increased focus on the small, constrained devices that make up the Internet of Things (IOT). 
        One of the standards that has come of of this process is the Concise Binary Object Representation (CBOR). 
        This standard extends the data model of the JavaScript Object Notation (JSON) by allowing for binary data among other changes. 
        CBOR is being adopted by several of the IETF working groups dealing with the IOT world to do their encoding of data structures. 
        CBOR was designed specifically to be both small in terms of messages transport and implementation size. 
        A need exists to provide basic message security services for IOT and using CBOR as the message encoding format makes sense.
      </t>

      <t>
        The JOSE working group produced a set of documents <xref target="RFC7515"/><xref target="RFC7516"/><xref target="RFC7517"/><xref target="RFC7518"/> that defined how to perform encryption, signatures and message authentication (MAC) operations for JavaScript Object Notation (JSON) documents and then to encode the results using the JSON format <xref target="RFC7159"/>.
        This document does the same work for use with the Concise Binary Object Representation (CBOR) <xref target="RFC7049"/> document format.
        While there is a strong attempt to keep the flavor of the original JOSE documents, two considerations are taken into account:
      </t>

      <t>
        <list style="symbols">
          <t>
            CBOR has capabilities that are not present in JSON and should be used. 
            One example of this is the fact that CBOR has a method of encoding binary directly without first converting it into a base64 encoded string.
          </t>
          <t>
            The author did not always agree with some of the decisions made by the JOSE working group. 
            Many of these decisions have been re-examined, and where it seems to the author to be superior or simpler, replaced.
          </t>
        </list>
      </t>

      <section anchor="design-changes-from-jose" title="Design changes from JOSE">

        <t>
          <list style="symbols">
            <t>
              Define a top level message structure so that encrypted, signed and MACed messages can easily identified and still have a consistent view.
            </t>
            <t>
              Signed messages separate the concept of protected and unprotected attributes that are for the content and the signature.
            </t>
            <t>
              Key management has been made to be more uniform. 
              All key management techniques are represented as a recipient rather than only have some of them be so.
            </t>
            <t>
              MAC messages are separated from signed messages.
            </t>
            <t>
              MAC messages have the ability to do key management on the MAC authentication key.
            </t>
            <t>
              Use binary encodings for binary data rather than base64url encodings.
            </t>
            <t>
              Combine the authentication tag for encryption algorithms with the ciphertext.
            </t>
            <t>
              Remove the flattened mode of encoding. 
              Forcing the use of an array of recipients at all times forces the message size to be two bytes larger, but one gets a corresponding decrease in the implementation size that should compensate for this.
              <cref source="JLS">Need to check this list for correctness before publishing.</cref>
            </t>
          </list>
        </t>

      </section>

      
      <section anchor="requirements-terminology" title="Requirements Terminology">

        <t>
          The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in <xref target="RFC2119"/>.
        </t>

        <t>
          When the words appear in lower case, their natural language meaning is used.
        </t>

      </section>
      
      <section anchor="cbor-grammar" title="CBOR Grammar">

        <t>
          There currently is no standard CBOR grammar available for use by specifications.
          In this document, we use the grammar defined in the CBOR data definition language (CDDL) <xref target="I-D.greevenbosch-appsawg-cbor-cddl"/>.
        </t>

        <t>
          CDDL productions that together define the grammar are interspersed in the document like this:
        </t>

          <figure><artwork type='CDDL'>
<![CDATA[
start = COSE_MSG
]]></artwork></figure>

        <t>
          The collected CDDL can be extracted from the XML version of this document via the following XPath expression below.
          (Depending on the XPath evaluator one is using, it may be necessary to deal with &amp;gt; as an entity.)
        </t>

        <t>
          <figure><artwork type='XPATH'>
<![CDATA[
//artwork[@type='CDDL']/text()
]]></artwork></figure>         
        </t>
        
        <t>
          NOTE:  At some point we need to make some decisions about how we are using CDDL in this document.
          Since this draft has not been moving forward at a great rate, changing all references on it to informational is a good idea.
          On the other hand, having some type of syntax that can be examined by a machine to do syntax checking is a big win.
          The build system for this draft is currently using the latest version of CDDL to check that the syntax of the examples is correct.
          Doing this has found problems in both the syntax checker, the syntax and the examples.
        </t>

      </section>

      <section title="CBOR Related Terminology" anchor="label">
        <t>
        In JSON, maps are called objects and only have one kind of map key: a string.
        In COSE, we use both strings and integers (both negative and non-negative integers) as map keys, as well as data items to identify specific choices.
        The integers (both positive and negative) are used for compactness of encoding and easy comparison.
        (Generally, in this document the value zero is going to be reserved and not used.)
        Since the work "key" is mainly used in its other meaning, as a cryptographic key, we use the term "label" for this usage of either an integer or a string to identify map keys and choice data items.

        <figure><artwork type='CDDL'>
<![CDATA[
label = int / tstr
]]></artwork></figure>
        </t>
      </section>
    </section>
    
    <section anchor="the-cosemsg-structure" title="The COSE_MSG structure">

      <t>
        The COSE_MSG structure is a top level CBOR object that corresponds to the DataContent type in the Cryptographic Message Syntax (CMS) <xref target="RFC5652"/>.
        This structure allows for a top level message to be sent that could be any of the different security services.
        The security service is identified within the message.
      </t>

      <t>
        The COSE_Tagged_MSG CBOR type takes the COSE_MSG and prepends a CBOR tag of TBD1 to the encoding of COSE_MSG.
        By having both a tagged and untagged version of the COSE_MSG structure, it becomes easy to either use COSE_MSG as a top level object or embedded in another object.
        The tagged version allows for a method of placing the COSE_MSG structure into a choice, using a consistent tag value to determine that this is a COSE object.
      </t>

      <t>
        The existence of the COSE_MSG and COSE_Tagged_MSG CBOR data types are not intended to prevent protocols from using the individual security primitives directly.
        Where only a single service is required, that structure can be used directly.
      </t>

      <t>
        Each of the top-level security objects use a CBOR map as the base structure.
        Items in the map at the top level are identified by a label.
        This document defines a number of labels in the IANA “COSE Object Labels Registry” (defined in <xref target="IANA-Top-Level-Keys"/>).
      </t>

      <t>
        The set of labels present in a security object is not restricted to those defined in this document.
        However, it is not recommended that additional fields be added to a structure unless this is going to be done in a closed environment.
        When new fields need to be added, it is recommended that a new message type be created so that processing of the field can be ensured.
        Using an older structure with a new field means that any security properties of the new field will not be enforced.
        Before a new field is added at the outer level, strong consideration needs to be given to defining a new header field and placing it into the protected headers.
        Applications should make a determination if non-standardized fields are going to be permitted.
        It is suggested that libraries allow for an option to fail parsing if non-standardized fields exist, this is especially true if they do not allow for access to the fields in other ways.
      </t>

      <t>
        A field 'msg_type' is defined to distinguish between the different structures when they appear as part of a COSE_MSG object.
        <cref source="JLS">
          I have moved msg_type into the individual structures.
          However, they would not be necessary in the cases where a) the security service is known and b) security libraries can setup to take individual structures.
          Should they be moved back to just appearing if used in a COSE_MSG rather than on the individual structure?
        </cref>
        <cref source="JLS">Should we create an IANA registries for the values of msg_type?</cref>
        This field is indexed by an integer value 1, the values defined in this document are:
      </t>

      <t>
        <list style="none">
          <t>0 - Reserved.</t>
          <t>1 - Signed Message.</t>
          <t>2 - Encrypted Message</t>
          <t>3 - Authenticated Message (MACed message)</t>
        </list>
      </t>

      <t>
        Implementations MUST be prepared to find an integer under this label that does not correspond to the values 1 to 3.
        If this is found then the client MUST stop attempting to parse the structure and fail.
        The value of 0 is reserved and not to be used.
        If the value of 0 is found, then clients MUST fail processing the structure.
        Implementations need to recognize that the set of values might be extended at a later date, but they should not provide a security service based on guesses of what is there.
      </t>

      <t>
        NOTE:  Is there any reason to allow for a marker of a COSE_Key structure and allow it to be a COSE_MSG?
	Doing so does allow for a security risk, but may simplify the code.
        <cref source="JLS">OPEN ISSUE</cref>
      </t>

      <t>
        The CDDL grammar that corresponds to the above is:
      </t>
      <figure><artwork type="CDDL"><![CDATA[
COSE_MSG = COSE_Sign / 
    COSE_encrypt / 
    COSE_mac

COSE_Tagged_MSG = #6.999(COSE_MSG)   ; Replace 999 with TBD1

; msg_type values
reserved=0
msg_type_signed=1
msg_type_encrypted=2
msg_type_mac=3

]]></artwork></figure>

      <t>
        The top level of each of the COSE message structures are encoded as maps.
        We use an integer to distinguish between the different security message types.
        By searching for the integer under the label identified by msg_type (which is in turn an integer), one can determine which security message is being used and thus what syntax is for the rest of the elements in the map.
      </t>

      <texttable anchor="Top-Level-Keys" title="COSE Map Labels">
        <ttcol align='left'>name</ttcol>
        <ttcol align='left'>number</ttcol>
        <ttcol align='left'>comments</ttcol>
        
        <c>msg_type</c>         <c>1</c>        <c>Occurs only in top level messages</c>
        <c>protected</c>        <c>2</c>        <c>Occurs in all structures</c>
        <c>unprotected</c>      <c>3</c>        <c>Occurs in all structures</c>
        <c>payload</c>          <c>4</c>        <c>Contains the content of the structure</c>
        <c>signatures</c>       <c>5</c>        <c>For COSE_Sign - array of signatures</c>
        <c>signature</c>        <c>6</c>        <c>For COSE_signature only</c>
        <c>ciphertext</c>       <c>4</c>        <c>TODO: Should we reuse the same as payload or not?</c>
        <c>recipients</c>       <c>9</c>        <c>For COSE_encrypt and COSE_mac</c>
        <c>tag</c>              <c>10</c>       <c>For COSE_mac only</c>
      </texttable>

      <t>
        The CDDL grammar that provides the label values is:
      </t>
      <figure><artwork type="CDDL"><![CDATA[
; message_labels
msg_type=1
protected=2
unprotected=3
payload=4
signatures=5
signature=6
ciphertext=4
recipients=9
tag=10

]]></artwork></figure>
      
    </section>

    <section anchor="header-parameters" title="Header Parameters">

      <t>
        The structure of COSE has been designed to have two buckets of information that are not considered to be part of the payload itself, but are used for holding information about algorithms, keys, or evaluation hints for the  processing of the layer.
        These two buckets are available for use in all of the structures in this document except for keys.
        While these buckets can be present, they may not all be usable in all instances.
        For example, while the protected bucket is present for recipient structures, most of the algorithms that are used for recipients do not provide the necessary functionality to provide the needed protection and thus the element is not used.
      </t>

      <t>
        Both buckets are implemented as CBOR maps.
        The map key is a 'label' (<xref target="label"/>).
        The value portion is dependent on the definition for the label.
        Both maps use the same set of label/value pairs. 
        The integer range for labels has been divided into several sections with a standard range, a private range, and a range that is dependent on the algorithm selected. 
        The tables of labels can be found in <xref target="Header-Table"/>.
      </t>

      <t>
        Two buckets are provided for each layer:
        <cref source="JLS">
          A completest version of this grammar would list the options available in the protected and unprotected headers.
          Do we want to head that direction?
        </cref>

        <list style="hanging">
          <t hangText='protected'>
            contains attributes about the layer that are to be cryptographically protected. 
            This bucket MUST NOT be used if it is not going to be included in a cryptographic computation.
          </t>
          <t hangText='unprotected'>
            contains attributes about the layer that are not cryptographically protected.
          </t>
        </list>

        Both of the buckets are optional and are omitted if there are no items contained in the map.  The CDDL fragment that describes the two buckets is:
      </t>

      <figure><artwork type="CDDL"><![CDATA[
header_map = {+ label => any }

Headers = (
    ? protected => bstr,
    ? unprotected => header_map
)
]]></artwork></figure>

      <section anchor="cose-headers" title="COSE Headers">
        <t>
          The set of header fields defined in this document are:
        </t>

        <t>
          <list style="hanging">
            <t hangText='alg'>
              This field is used to indicate the algorithm used for the security processing.
              This field MUST be present at each level of a signed, encrypted or authenticated message.
              This field using the integer '1' for the label.
              The value is taken from the 'COSE Algorithm Registry' (see <xref target="IANA-Alg-Registry"/>).
            </t>
            
            <t hangText='crit'>
              This field is used to ensure that applications will take appropriate action based on the values found.
              The field is used to indicate which protected header labels an application that is processing a message is required to understand.
              This field uses the integer '2' for the label. 
              The value is an array of COSE Header Labels.
              When present, this MUST be placed in the protected header bucket.
              <list style="symbols">
                <t>Integer labels in the range of 0 to 10 SHOULD be omitted.</t>
                <t>
                  Integer labels in the range -1 to -255 can be omitted as they are algorithm dependent.
                  If an application can correctly process an algorithm, it can be assumed that it will correctly process all of the parameters associated with that algorithm.
                </t>
              </list>
              The header values indicated by 'crit' can be processed by either the security library code or by an application using a security library, the only requirement is that the field is processed.
            </t>
            
            <t hangText='cty'>
              This field is used to indicate the content type of the data in the payload or ciphertext fields.
              The field uses the integer of '3' for the label. 
              The value can be either an integer or a string.
              Integers are from the XXXXX<cref source="JLS">Need to figure out how we are going to go about creating this registry -or are we going to modify the current mime-content table?</cref> IANA registry table.
              Strings are from the IANA 'mime-content types' registry.
              Applications SHOULD provide this field if the content structure is potentially ambiguous.
            </t>
            
            <t hangText='kid'>
              This field one of the ways that can be used to find the key to be used.
              This value can be matched against the 'kid' field in a COSE_Key structure.
              Applications MUST NOT assume that 'kid' values are unique.
              There may be more than one key with the same 'kid' value, it may be required that all of the keys need to be checked to find the correct one.
              This field uses the integer value of '4' for the label.
              The value of field is the CBOR 'bstr' type.
              The internal structure of 'kid' is not defined and generally cannot be relied on by applications.
              Key identifier values are hints about which key to use, they are not directly a security critical field, for this reason they can normally be placed in the unprotected headers bucket.
            </t>

            <t hangText='nonce'>
              This field holds either a nonce or Initialization Vector value.
              This value can be used either as a counter value for a protocol or as an IV for an algorithm.
              TODO: Talk about zero extending the value in some cases.
            </t>
          </list>
        </t>

        <t>
          This table contains a list of all of the parameters for use in signature and encryption message types defined by the JOSE document set.  In the table is the data value type to be used for CBOR as well as the integer value that can be used as a replacement for the name in order to further decrease the size of the sent item.
        </t>

      <texttable anchor="Header-Table" title="Header Labels">
        <ttcol align='left'>name</ttcol>
        <ttcol align='left'>label</ttcol>
        <ttcol align='left'>value</ttcol>
        <ttcol align='left'>registry</ttcol>
        <ttcol align='left'>description</ttcol>
        
        <c>alg</c>        <c>1</c>        <c>int / tstr</c>        <c>COSE Algorithm Registry</c>       <c>Integers are taken from table <xref target="ALG_TABLE"/></c>
        <c>crit</c>       <c>2</c>        <c>[+ label]</c>    <c>COSE Header Label Registry</c>      <c>integer values are from this table.</c>
        <c>cty</c>        <c>3</c>        <c>tstr / int</c>        <c>media-types registry</c>          <c>Value is either a media-type or an integer from the media-type registry</c>
        <c>jku</c>        <c>*</c>        <c>tstr</c>              <c></c>                              <c>URL to COSE key object</c>
        <c>jwk</c>        <c>*</c>        <c>COSE_Key</c>          <c></c>                              <c>contains a COSE key not a JWK key</c>
        <c>kid</c>        <c>4</c>        <c>bstr</c>              <c></c>                              <c>key identifier</c>
        <c>x5c</c>        <c>*</c>        <c>bstr*</c>             <c></c>                              <c>X.509 Certificate Chain</c>
        <c>x5t</c>        <c>*</c>        <c>bstr</c>              <c></c>                              <c>SHA-1 thumbprint of key</c>
        <c>x5t#S256</c>   <c>*</c>        <c>bstr</c>              <c></c>                              <c>SHA-256 thumbprint of key</c>
        <c>x5u</c>        <c>*</c>        <c>tstr</c>              <c></c>                              <c>URL for X.509 certificate</c>
        <c>zip</c>        <c>*</c>        <c>int / tstr</c>        <c></c>                              <c>Integers are taken from the table <xref target="ALG_TABLE"/></c>
        <c>nonce</c>      <c>5</c>        <c>bstr</c>              <c></c>                              <c>Nonce or Initialization Vector (IV)</c>
      </texttable>

      <t>
        OPEN ISSUES:
        <list style="numbers">
          <t>Which of the following items do we want to have standardized in this document: jku, jwk, x5c, x5t, x5t#S256, x5u, zip</t>
          <t>
            I am currently torn on the question "Should epk and iv/nonce be algorithm specific or generic headers?"
            They are really specific to an algorithm and can potentially be defined in different ways for different algorithms.
            As an example, it would make sense to defined nonce for CCM and GCM modes that can have the leading zero bytes stripped, while for other algorithms this might be undesirable.
          </t>
          <t>
            We might want to define some additional items.  What are they?  A possible example would be a sequence number as this might be common.  On the other hand, this is the type of things that is frequently used as the nonce in some places and thus should not be used in the same way.  Other items might be challenge/response fields for freshness as these are likely to be common.
          </t>
        </list>
      </t>

      </section>
    </section>

    
    <section anchor="signing-structure" title="Signing Structure">

      <t>
        The signature structure allows for one or more signatures to be applied to a message payload.
        There are provisions for attributes about the content and attributes about the signature to be carried along with the signature itself.
        These attributes may be authenticated by the signature, or just present.
        Examples of attributes about the content would be the type of content, when the content was created, and who created the content.
        Examples of attributes about the signature would be the algorithm and key used to create the signature, when the signature was created, and counter-signatures.
      </t>

      <t>
        When more than one signature is present, the successful validation of one signature associated with a given signer is usually treated as a successful signature by that signer.
        However, there are some application environments where other rules are needed.
        An application that employs a rule other than one valid signature for each signer must specify those rules.
        Also, where simple matching of the signer identifier is not sufficient to determine whether the signatures were generated by the same signer, the application specification must describe how to determine which signatures were generated by the same signer.
        Support of different communities of recipients is the primary reason that signers choose to include more than one signature.
        For example, the COSE_Sign structure might include signatures generated with the RSA signature algorithm and with the Elliptic Curve Digital Signature Algorithm (ECDSA) signature algorithm.
        This allows recipients to verify the signature associated with one algorithm or the other.
        (The original source of this text is <xref target="RFC5652"/>.)
        <!-- RFC Editor: This is not a direct quote from RFC 5652, but the basic text has come from there.  I want to acknowledge the original source of the quote but am not sure what is the correct way to go about this.-->
        More detailed information on multiple signature evaluation can be found in <xref target="RFC5752"/>.
      </t>

      <t>
        The CDDL grammar for a signature message is:
      </t>

      <figure><artwork type="CDDL"><![CDATA[
COSE_Sign = {
    msg_type => msg_type_signed,
    Headers,
    ? payload => bstr,
    signatures => [+ COSE_signature]
}
]]></artwork></figure>

      <t>
        The fields is the structure have the following semantics:
      </t>
      <t>
        <list style="hanging">
          <t hangText='msg_type'>
            identifies this as providing the signed security service.
            The value MUST be msg_type_signed (1).
          </t>
          <t hangText='protected'>
            contains attributes about the payload that are to be protected by the signature.
            An example of such an attribute would be the content type ('cty') attribute.
            The content is a CBOR map of attributes that is encoded to a byte stream.
            This field MUST NOT contain attributes about the signature, even if
            those attributes are common across multiple signatures.
            The labels in this map are typically taken from <xref target="Header-Table"/>.
          </t>
          <t hangText='unprotected'>
            contains attributes about the payload that are not protected by the signature.
            An example of such an attribute would be the content type ('cty') attribute.
            This field MUST NOT contain attributes about a signature, even if
            the attributes are common across multiple signatures.
            The labels in this map are typically taken from <xref target="Header-Table"/>.
          </t>
          <t hangText='payload'>
            contains the serialized content to be signed.
            If the payload is not present in the message, the application is required to 
            supply the payload separately.
            The payload is wrapped in a bstr to ensure that it is transported without changes.
            If the payload is transported separately, it is the responsibility of the application
            to ensure that it will be transported without changes.
          </t>
          <t hangText='signatures'>
            is an array of signature items.  Each of these items uses the COSE_signature structure for its representation.
          </t>
        </list>
      </t>

      <t>
        We use the values in <xref target="Top-Level-Keys"/> as the labels in the COSE_Sign map.
        While other labels can be present in the map, it is not generally a recommended practice. 
        The other labels can be either of integer or string type, use of other types SHOULD be treated as an error.
      </t>

      <t>
        The CDDL grammar structure for a signature is:
      </t>

      <figure><artwork type="CDDL"><![CDATA[
COSE_signature =  {
    Headers,      
    signature => bstr
}
]]></artwork></figure>

      <t>
        The fields in the structure have the following semantics:
      </t>

      <t>
        <list style="hanging">
          <t hangText='protected'>
            contains additional information to be authenticated by the signature.
            The field holds data about the signature operation.
            The field MUST NOT hold attributes about the payload being signed.
            The content is a CBOR map of attributes that is encoded to a byte stream.
            At least one of protected and unprotected MUST be present.
          </t>
          <t hangText='unprotected'>
            contains attributes about the signature that are not protected by the signature.
            This field MUST NOT contain attributes about the payload being signed.
            At least one of protected and unprotected MUST be present.
          </t>
          <t hangText='signature'>
            contains the computed signature value.
          </t>
        </list>
      </t>

      <t>
        The COSE structure used to create the byte stream to be signed uses the following CDDL grammar structure:
      </t>

      <figure><artwork type="CDDL"><![CDATA[
Sig_structure = [
    body_protected: bstr,
    sign_protected: bstr,
    payload: bstr
]
]]></artwork></figure>

      <t>
        How to compute a signature:

        <list style="numbers">
          <t>
            Create a Sig_structure object and populate it with the appropriate fields.  For body_protected and sign_protected, if the fields are not present in their corresponding maps, an bstr of length zero is used.
          </t>
          <t>
            Create the value ToBeSigned by encoding the Sig_structure to a byte string.
          </t>
          <t>
            Call the signature creation algorithm passing in K (the key to sign with), alg (the algorithm to sign with) and ToBeSigned (the value to sign).
          </t>
          <t>
            Place the resulting signature value in the 'signature' field of the map.
          </t>
        </list>
      </t>

      <t>
        How to verify a signature:

        <list style="numbers">
          <t>
            Create a Sig_structure object and populate it with the appropriate fields.  For body_protected and sign_protected, if the fields are not present in their corresponding maps, an bstr of length zero is used.
          </t>
          <t>
            Create the value ToBeSigned by encoding the Sig_structure to a byte string.
          </t>
          <t>
            Call the signature verification algorithm passing in K (the key to verify with), alg (the algorithm to sign with), ToBeSigned (the value to sign), and sig (the signature to be verified).
          </t>
        </list>
      </t>

      <t>
        In addition to performing the signature verification, one must also perform the appropriate checks to ensure that the key is correctly paired with the signing identity and that the appropriate authorization is done.
      </t>

    </section>

    <section anchor="encryption-object" title="Encryption object">

      <t>
        In this section we describe the structure and methods to be used when doing an encryption in COSE.
        In COSE, we use the same techniques and structures for encrypting both the plain text and the keys used to protect the text.
        This is different from the approach used by both <xref target="RFC5652"/> and <xref target="RFC7516"/> where different structures are
        used for the plain text and for the different key management techniques.
      </t>

      <t>
        One of the byproducts of using the same technique for encrypting and encoding both the content and the keys using the various key management techniques, is a requirement that all of the key management techniques use an Authenticated Encryption (AE) algorithm. 
        (For the purpose of this document we use a slightly loose definition of AE algorithms.)
        When encrypting the plain text, it is normal to use an Authenticated Encryption with Additional Data (AEAD) algorithm. 
        For key management, either AE or AEAD algorithms can be used.
        See <xref target="AE-algo"/> for more details about the different types of algorithms.
        <cref source="Ilari">I don't follow/understand this text</cref>
      </t>

      <t>
        The CDDL grammar structure for encryption is:
      </t>

      <figure><artwork type="CDDL"><![CDATA[
COSE_encrypt = {
    msg_type=>msg_type_encrypted,
    COSE_encrypt_fields
}

COSE_encrypt_fields = (
    Headers,
    ? ciphertext => bstr,
    ? recipients => [+{COSE_encrypt_fields}]
)
]]></artwork></figure>

      <t>
        Description of the fields:
      </t>

      <t>
        <list style="hanging">
          <t hangText='msg_type'>
            identifies this as providing the encrypted security service.
            The value MUST be msg_type_encrypted (2).
          </t>
          <t hangText='protected'>
            contains the information about the plain text or encryption process that is to be integrity protected.
            The field is encoded in CBOR as a 'bstr'.
            The contents of the protected field is a CBOR map of the protected data names and values.
            The map is CBOR encoded before placing it into the bstr.
            Only values associated with the current cipher text are to be placed in this location even if the value would apply to multiple recipient structures.
          </t>
          <t hangText='unprotected'>
            contains information about the plain text that is not integrity protected.
            Only values associated with the current cipher text are to be placed in this location even if the value would apply to multiple recipient structures.
          </t>
          <t hangText='ciphertext'>
            contains the encrypted plain text.
            If the ciphertext is to be transported independently of the control information about the encryption process (i.e. detached content) then the field is omitted.
          </t>
          <t hangText='recipients'>
            contains the recipient information.
            It is required that at least one recipient MUST be present for the content encryption layer.
          </t>
        </list>
      </t>

      <section anchor="key-management-methods" title="Key Management Methods">
        <t>
          This section has moved.
          Still need to make some small comments here.
        </t>
      </section>
      
      <section anchor="encryption-algorithm-for-aead-algorithms" title="Encryption Algorithm for AEAD algorithms">

        <t>
          The encryption algorithm for AEAD algorithms is fairly simple.
          In order to get a consistent encoding of the data to be authenticated, the Enc_structure is used to have canonical form of the AAD.
        </t>

        <figure><artwork type="CDDL"><![CDATA[
Enc_structure = [
    protected: bstr,
    external_aad: bstr
]

]]></artwork></figure>

        <t>
          <list style="numbers">
            <t>
              Copy the protected header field from the message to be sent.
            </t>

            <t>
              If the application has supplied external additional authenticated data to be included in the computation, then it is placed in the 'external_aad' field.
              If no data was supplied, then a zero length binary value is used.
            </t>

            <t>
              Encode the Enc_structure using a CBOR Canonical encoding <xref target="CBOR-Canonical"/> to get the AAD value.
            </t>

            <t>
              Determine the encryption key.  This step is dependent on the key management method being used:
              For:
              <list style="hanging">
                <t hangText="No Recipients:">
                  The key to be used is determined by the algorithm and key at the current level.
                </t>
                <t hangText="Direct and Direct Key Agreement:">
                  The key is determined by the key and algorithm in the recipient structure.
                  The encryption algorithm and size of the key to be used are inputs into the KDF used for the recipient.
                  (For direct, the KDF can be thought of as the identity operation.)
                </t>
                <t hangText="Other:">
                  The key is randomly generated.
                </t>
              </list>
            </t>
            
            <t>
              Call the encryption algorithm with K (the encryption key to use), P (the plain text) and AAD (the additional authenticated data).
              Place the returned cipher text into the 'ciphertext' field of the structure.
            </t>

            <t>
              For recipients of the message, recursively perform the encryption algorithm for that recipient using the encryption key as the plain text.
            </t>
          </list>
        </t>

      </section>
      <section anchor="encryption-algorithm-for-ae-algorithms" title="Encryption algorithm for AE algorithms">

        <t>
          <list style="numbers">
            <t>
              Verify that the 'protected' field is absent.
            </t>
            <t>
              Verify that there was no external additional authenticated data supplied for this operation.
            </t>
            <t>
              Determine the encryption key.  This step is dependent on the key management method being used:
              For:
              <list style="hanging">
                <t hangText="No Recipients:">
                  The key to be used is determined by the algorithm and key at the current level.
                </t>
                <t hangText="Direct and Direct Key Agreement:">
                  The key is determined by the key and algorithm in the recipient structure.
                  The encryption algorithm and size of the key to be used are inputs into the KDF used for the recipient.
                  (For direct, the KDF can be thought of as the identity operation.)
                </t>
                <t hangText="Other:">
                  The key is randomly generated.
                </t>
              </list>
            </t>
            
            <t>
              Call the encryption algorithm with K (the encryption key to use) and the P (the plain text).
              Place the returned cipher text into the 'ciphertext' field of the structure.
            </t>

            <t>
              For recipients of the message, recursively perform the encryption algorithm for that recipient using the encryption key as the plain text.
            </t>
          </list>
        </t>

      </section>
    </section>
    
    <section anchor="mac-objects" title="MAC objects">

      <t>
        In this section we describe the structure and methods to be used when doing MAC authentication in COSE. 
        JOSE used a variant of the signature structure for doing MAC operations and it is restricted to using a single pre-shared secret to do the authentication.
        <cref source="JLS">Should this sentence be removed?</cref>
        This document allows for the use of all of the same methods of key management as are allowed for encryption.
      </t>

      <t>
        When using MAC operations, there are two modes in which it can be used. 
        The first is just a check that the content has not been changed since the MAC was computed. 
        Any of the key management methods can be used for this purpose. 
        The second mode is to both check that the content has not been changed since the MAC was computed, and to use key management to verify who sent it. 
        The key management modes that support this are ones that either use a pre-shared secret, or do static-static key agreement. 
        In both of these cases the entity MACing the message can be validated by a key binding. 
        (The binding of identity assumes that there are only two parties involved and you did not send the message yourself.)
      </t>

      <figure><artwork type="CDDL"><![CDATA[
COSE_mac = {
   msg_type=>msg_type_mac, 
   Headers,
   ? payload => bstr,
   tag => bstr,
   recipients => [+{COSE_encrypt_fields}]
}

]]></artwork></figure>

      <t>
        Field descriptions:
      </t>

      <t>
        <list style="hanging">
          <t hangText='msg_type'>
            identifies this as providing the encrypted security service.
            The value MUST be msg_type_mac (3).
          </t>
          <t hangText='protected'>
            contains attributes about the payload that are to be protected by the MAC.
            An example of such an attribute would be the content type ('cty') attribute.
            The content is a CBOR map of attributes that is encoded to a byte stream.
            This field MUST NOT contain attributes about the recipient, even if those attributes are common across multiple recipients.
            At least one of protected and unprotected MUST be present.
          </t>
          <t hangText='unprotected'>
            contains attributes about the payload that are not protected by the MAC.
            An example of such an attribute would be the content type ('cty') attribute.
            This field MUST NOT contain attributes about a recipient, even if the attributes are common across multiple recipients.
            At least one of protected and unprotected MUST be present.
          </t>
          <t hangText='payload'>
            contains the serialized content to be MACed.
            If the payload is not present in the message, the application is required to supply the payload separately.
            The payload is wrapped in a bstr to ensure that it is transported without changes, if the payload is transported separately it is the responsibility of the application to ensure that it will be transported without changes.
          </t>
          <t hangText='tag'>
            contains the MAC value.
          </t>
          <t hangText='recipients'>
            contains the recipient information.  
            See the description under COSE_Encryption for more info.
          </t>
        </list>
      </t>

      <figure><artwork type="CDDL"><![CDATA[
 MAC_structure = [
     protected: bstr,
     external_aad: bstr,
     payload: bstr
]
]]></artwork></figure>

      <t>
        How to compute a MAC:
      </t>

      <t>
        <list style="numbers">
          <t>
            Create a MAC_structure and copy the protected and payload elements from the COSE_mac structure.
          </t>
          <t>
            If the application has supplied external authenticated data, encode it as a binary value and place in the MAC_structure.
            If there is no external authenticated data, then use a zero length 'bstr'.
          </t>
          <t>
            Encode the MAC_structure using a canonical CBOR encoder.  The resulting bytes is the value to compute the MAC on.
          </t>
          <t>
            Compute the MAC and place the result in the 'tag' field of the COSE_mac structure.
          </t>
          <t>
            Encrypt and encode the MAC key for each recipient of the message.
          </t>
        </list>
      </t>

    </section>
    <section anchor="key-structure" title="Key Structure">

      <t>
        There are only a few changes between JOSE and COSE for how keys are formatted.
        As with JOSE, COSE uses a map to contain the elements of a key.
        Those values, which in JOSE are base64url encoded because they are binary values, are encoded as bstr values in COSE.
      </t>

      <t>
        For COSE we use the same set of fields that were defined in <xref target="RFC7517"/>.
        <cref source="JLS">Do we remove this line and just define them ourselves?</cref>
        <cref source="JLS">
          We can really simplify the grammar for COSE_Key to be just the kty (the one required field) and the generic item.
          The reason to do this is that it makes things simpler.
          The reason not to do this says that we really need to add a lot more items so that a grammar check can be done that is more tightly enforced.
        </cref>
      </t>

      <figure><artwork type="CDDL"><![CDATA[
COSE_Key = {
    kty => tstr / int,
    ? key_ops => [+ tstr / int ],
    ? alg => tstr / int,
    ? kid => bstr,
    * label => values
}

COSE_KeySet = [+COSE_Key]
]]></artwork></figure>

      <t>
        The element “kty” is a required element in a COSE_Key map.
        All other elements are optional and not all of the elements listed in <xref target="RFC7517"/> or <xref target="RFC7518"/> have been listed here even though they can all appear in a COSE_Key map.
      </t>

      <t>
        The “key_ops” element is preferred over the “use” element as the information provided that way is more finely detailed about the operations allowed.  It is strongly suggested that this element be present for all keys.
      </t>

      <t>
        The same fields defined in <xref target="RFC7517"/> are used here with the following changes in rules:

        <list style="symbols">
          <t>
            Any item that is base64url encoded in JWK, is bstr encoded for COSE.
          </t>
          <t>
            Any item that is integer encoded in JWK, is int encoded for COSE.
          </t>
          <t>
            Any item that is string (but not base64url) encoded in JWK, is tstr encoded for COSE.
          </t>
          <t>
            Exceptions to this are the following fields:
            <list style="hanging">
              <t hangText='kid'>
                is always bstr encoded rather than tstr encoded.
                This change in encoding is due to the fact that frequently, values
                such as a hash of the public key is used for a kid value.
                Since the field is defined as not having a specific structure,
                making it binary rather than textual makes sense.
              </t>
            </list>
          </t>
        </list>
      </t>


    <section anchor="COSE_KEY_KEYS" title="COSE Key Map Labels">

      <t>
        This table contains a list of all of the parameters defined for keys that were defined by the JOSE document set.  In the table is the data value type to be used for CBOR as well as the integer value that can be used as a replacement for the name in order to further decrease the size of the sent item.
      </t>

      <texttable>
        <ttcol align='left'>name</ttcol>
        <ttcol align='left'>label</ttcol>
        <ttcol align='left'>CBOR type</ttcol>
        <ttcol align='left'>registry</ttcol>
        <ttcol align='left'>description</ttcol>
        
        <c>kty</c>        <c>1</c>        <c>tstr / int</c>        <c>COSE General Values</c>        <c>Identification of the key type</c>
        <c>use</c>        <c>*</c>        <c>tstr</c>        <c></c>        <c>deprecated - don't use</c>
        <c>key_ops</c>        <c>*</c>        <c>[* tstr]</c>        <c></c>        <c></c>
        <c>alg</c>        <c>3</c>        <c>tstr / int</c>        <c>COSE Algorithm Values</c>        <c>Key usage restriction to this algorithm</c>
        <c>kid</c>        <c>2</c>        <c>bstr</c>        <c></c>        <c>Key Identification value - match to kid in message</c>
        <c>x5u</c>        <c>*</c>        <c>tstr</c>        <c></c>        <c></c>
        <c>x5c</c>        <c>*</c>        <c>bstr*</c>        <c></c>        <c></c>
        <c>x5t</c>        <c>*</c>        <c>bstr</c>        <c></c>        <c></c>
        <c>x5t#S256</c>        <c>*</c>        <c>bstr</c>        <c></c>        <c></c>
      </texttable>

      <figure><artwork type="CDDL"><![CDATA[
;key_labels
kty=1
key_kid=2
key_alg=3

]]></artwork></figure>

    </section>
      
    </section>
    <section anchor="CBOR-Canonical" title="CBOR Encoder Restrictions">

      <t>
        There as been an attempt to limit the number of places where the document 
        needs to impose restrictions on how the CBOR Encoder needs to work.  We have
        managed to narrow it down to the following restrictions:
      </t>

      <t>
        <list style="symbols">
          <t>
            The restriction applies to the encoding the Sig_structure, the Enc_structure, and the MAC_structure.
          </t>
          <t>
            The rules for Canonical CBOR (Section 3.9 of RFC 7049) MUST be used in these
            locations.  The main rule that needs to be enforced is that all lengths
            in these structures MUST be encoded such that they are encoded using definite lengths 
            and the minimum length encoding is used.
          </t>
          <t>
            All parsers used SHOULD fail on both parsing and generation if the same label is used twice as a key for the same map.
          </t>
        </list>
      </t>

    </section>


    <section title="Signature Algorithms">
      <section title="RSASSA-PSS">
        <texttable>
          <ttcol align='left'>name</ttcol>
          <ttcol align='left'>value</ttcol>
          <ttcol align='left'>description</ttcol>
          <c>PS256</c>        <c>-10</c>      <c>RSASSA-PSS w/ SHA-256</c>
          <c>PS384</c>        <c>*</c>        <c>RSASSA-PSS w/ SHA-384</c>
          <c>PS512</c>        <c>-11</c>      <c>RSASSA-PSS w/ SHA-512</c>
        </texttable>
      </section>
      
      <section title="ECDSA">
        <t>
          ECDSA <xref target="DSS"/> defines a signature algorithm using ECC.
        </t>

        <t>
          The security strength of the signature is no greater than the minimum of the security strength associated with the bit length of the key and the security strength of the hash function.
          When a hash function is used that has greater security than is provided by the length of the key, the signature algorithm uses the leftmost keyLength bits of the hash function output.
        </t>
        
        <texttable title="ECDSA Algorithm Values" anchor="table_ecdsa">
          <ttcol align='left'>name</ttcol>
          <ttcol align='left'>value</ttcol>
          <ttcol align='left'>hash</ttcol>
          <ttcol align='left'>description</ttcol>
          <c>ES256</c>        <c>-7</c>       <c>SHA-256</c>   <c>ECDSA w/ SHA-256</c>
          <c>ES384</c>        <c>-8</c>       <c>SHA-384</c>   <c>ECDSA w/ SHA-384</c>
          <c>ES512</c>        <c>-9</c>       <c>SHA-512</c>   <c>ECDSA w/ SHA-512</c>
        </texttable>

        <t>
          In order to promote interoperability, it is suggested that SHA-256 be used only with keys of length 256, SHA-384 be used only with keys of length 384 and SHA-512 be used only with keys of length 521.
          This is aligned with the recommendation in Section 4 of <xref target="RFC5480"/>.
        </t>

        <t>
          The signature algorithm results in a pair of integers (R, S).
          These integers will be of the same order as length of the key used for the signature process.
          The signature is encoded by converting the integers into byte strings of the same length as the key size.
          The length is rounded up to the nearest byte and is left padded with zero bits to get to the correct length.
          The two integers are then concatenated together to form a byte string that is the resulting signature.
        </t>

        <t>
          Using the function defined in <xref target="RFC3447"/> the signature is:
          <vspace/>
          Signature = I2OSP(R, n) | I2OSP(S, n)
          <vspace/>
          where n = ceiling(key_length / 8)
        </t>

        <section title="Security Considerations">
          <t>
            On of the issues that needs to be discussed is substitution attacks.
            There are two different things that can potentially be substituted in this algorithm.
            Both of these attacks are current theoretical only.
          </t>
          
          <t>
            The first substitution attack is changing the curve used to validate the signature, the only requirement is that the order of the key match the length of R and S.
            It is theoretically possible to use a different curve and get a different result.
            We current do not have any way to deal with this version of the attack except to restrict the overall set of curves that can be used.
          </t>

          <t>
            The second substitution attack is to change the hash function that is used to verify the signature.
            This attack can be mitigated by including the signature algorithm identifier in the data to be signed.
          </t>
        </section>
        
      </section>
    </section>

    <section title="Message Authentication (MAC) Algorithms">
      <t>
        Message Authentication Codes (MACs) provide data authentication and integrity protection.
        They provide either no or very limited data origination.
        (One cannot, for example, be used to prove the identity of the sender to a third party.)
      </t>

      <t>
        MAC algorithms can be based on either a block cipher algorithm (i.e. AES-MAC) or a hash algorithm (i.e. HMAC).
        This document defines a MAC algorithm for each of these two constructions.
      </t>

      <section title="Hash-based Message Authentication Codes (HMAC)">
        <t>
          The Hash-base Message Authentication Code algorithm (HMAC) <xref target="RFC2104"/><xref target="RFC4231"/> was designed, in part, to deal with the birthday attacks on straight hash functions.
          The algorithm was also designed to all for new hash algorithms to be directly plugged in without changes to the hash function.
          The HMAC design process has been vindicated as, while the security of hash algorithms such as MD5 has decreased over time, the security of HMAC combined with MD5 has not yet been shown to be compromised <xref target="RFC6151"/>.
        </t>

        <t>
          For use in constrained environments, we define a set of HMAC algorithms that are truncated.
          There are currently no known issues when truncating, however the security strength of the message tag is correspondingly reduced in strength.
          When truncating, the left most tag length bits are kept and transmitted.
        </t>
        
        <texttable title="HMAC Algorithm Values" anchor="table-hmac">
          <ttcol align='left'>name</ttcol>
          <ttcol align='left'>value</ttcol>
          <ttcol align='left'>Hash</ttcol>
          <ttcol align='left'>Length</ttcol>
          <ttcol align='left'>description</ttcol>
          <c>HMAC 256/64</c>         <c>*</c>        <c>SHA-256</c>    <c>64</c>        <c>HMAC w/ SHA-256 truncated to 8 bytes</c>
          <c>HMAC 256/256</c>        <c>4</c>        <c>SHA-256</c>    <c>256</c>       <c>HMAC w/ SHA-256</c>
          <c>HMAC 384/384</c>        <c>5</c>        <c>SHA-384</c>    <c>384</c>       <c>HMAC w/ SHA-384</c>
          <c>HMAC 512/512</c>        <c>6</c>        <c>SHA-512</c>    <c>512</c>       <c>HMAC w/ SHA-512</c>
        </texttable>

        <section title="Security Considerations">
          <t>
            TBD.
          </t>
        </section>
      </section>

      <section title="AES Message Authentication Code (AES-MAC)">
        <t>
          There are a set of different algorithms that we can specify here.  Which should it be?
          <list>
            <t>AES-MAC - Use standard CBC mode</t>
            <t>AES-CMAC - RFC 4493 - has improved security over AES-CBC.  The padding is different from CBC mode and requires one extra AES block encryption step plus and xor operation.</t>
          </list>
        </t>

          <!--
        <texttable title="AES-MAC Algorithm Values" anchor="table-aes-mac">
          <ttcol align='left'>name</ttcol>
          <ttcol align='left'>value</ttcol>
          <ttcol align='left'>key length</ttcol>
          <ttcol align='left'>tag length</ttcol>
          <ttcol align='left'>description</ttcol>
          <c>AES-MAC 128/64</c>         <c>*</c>        <c>128</c>      <c>64</c>       <
          <c>HMAC 256/64</c>         <c>*</c>        <c>SHA-256</c>    <c>64</c>        <c>HMAC w/ SHA-256 truncated to 8 bytes</c>
          <c>HMAC 256/256</c>        <c>4</c>        <c>SHA-256</c>    <c>256</c>       <c>HMAC w/ SHA-256</c>
          <c>HMAC 384/384</c>        <c>5</c>        <c>SHA-384</c>    <c>384</c>       <c>HMAC w/ SHA-384</c>
          <c>HMAC 512/512</c>        <c>6</c>        <c>SHA-512</c>    <c>512</c>       <c>HMAC w/ SHA-512</c>
        </texttable>
-->
      </section>
    </section>

    <section title="Content Encryption Algorithms">
      <section title="AES GCM">
        <texttable title="Algorithm Value for AES-GCM" anchor="table-AES-GCM">
          <ttcol align='left'>name</ttcol>
          <ttcol align='left'>value</ttcol>
          <ttcol align='left'>description</ttcol>
          <c>A128GCM</c>        <c>1</c>        <c>AES-GCM mode w/ 128-bit key</c>
          <c>A192GCM</c>        <c>2</c>        <c>AES-GCM mode w/ 192-bit key</c>
          <c>A256GCM</c>        <c>3</c>        <c>AES-GCM mode w/ 256-bit key</c>
        </texttable>
        
      </section>
      
      <section title="AES CCM">
        <t>
          Counter with CBC-MAC (CCM) is a generic authentication encryption block cipher mode defined in <xref target="RFC3610"/>.
          The CCM mode is combined with the AES block encryption algorithm to define a commonly used content encryption algorithm used in constrainted devices.
        </t>

        <t>
          The CCM mode has two parameter choices.
          The first choice is M, the size of the authentication field.
          The choice of the value for M involves a trade-off between message expansion and the probably that an attacker can undetecably modify a message.
          
          The second choice is L, the size of the length field.
          This value requires a trade-off between the maximum message size and the size of the Nonce.
        </t>

        <t>
          It is unfortunate that the specification for CCM specified L and M as a count of bytes rather than a count of bits.
          This leads to possible misunderstandings where AES-CCM-8 is frequently used to refer to a version of CCM mode where the size of the authentication is 64-bits and not 8-bits.
          These values have traditionally been specified as bit counts rather than byte counts.
          This document will follow the tradition of using bit counts so that it is easier to compare the different algorithms presented in this document.
        </t>

        <t>
          We define a matrix of algorithms in this document over the values of L and M.
          Constrained devices are usually operating in situations where they use short messages and want to avoid doing key management operations.
          This favors smaller values of M and larger values of L.
          Less constrained devices do will want to be able to user larger messages and are more willing to generate new keys for every operation.
          This favors larger values of M and smaller values of L.
          (The use of a large nonce means that random generation of both the key and the nonce will decrease the chances of repeating the pair on two different messages.)
        </t>

        <t>
          The following values are used for L:
          <list style="hanging">
            <t hangText="16-bits (2)">
              limits messages to 2^16 bytes in length.
              The nonce length is 13 bytes allowing for 2^(13*8) possible values of the nonce without repeating.
            </t>
            <t hangText="64-bits (8)"> 
              limits messages to 2^64 byes in length.
              The nonce length is 7 bytes allowing for 2^56 possible values of the nonce without repeating.
            </t>
          </list>
        </t>

        <t>
          The following values are used for M:
          <list style="hanging">
            <t hangText="64-bits (8)">
              produces a 64-bit authentication tag.
              This implies that there is a 1 in 2^64 chance that an modified message will authenticate.
            </t>
            <t hangText="128-bits (16)">
              produces a 128-bit authentication tag.
              This implies that there is a 1 in 2^128 chance that an modified message will authenticate.
            </t>
          </list>
        </t>
        
        <texttable anchor="table-AES-CCM" title="Algorithm Values for AES-CCM">
          <ttcol align='left'>name</ttcol>
          <ttcol align='left'>value</ttcol>
          <ttcol align='left'>L</ttcol>
          <ttcol align='left'>M</ttcol>
          <ttcol align='left'>k</ttcol>
          <ttcol align='left'>description</ttcol>
          <c>AES-CCM-16-64-128</c>        <c>A281C</c>    <c>16</c>       <c>64</c>       <c>128</c>      <c>AES-CCM mode 128-bit key, 64-bit tag, 13-byte nonce</c>
          <c>AES-CCM-16-64-192</c>        <c>A282C</c>    <c>16</c>       <c>64</c>       <c>192</c>      <c>AES-CCM mode 192-bit key, 64-bit tag, 13-byte nonce</c>
          <c>AES-CCM-16-64-256</c>        <c>A283C</c>    <c>16</c>       <c>64</c>       <c>256</c>      <c>AES-CCM mode 256-bit key, 64-bit tag, 13-byte nonce</c>
          <c>AES-CCM-64-64-128</c>        <c>A881C</c>    <c>64</c>       <c>64</c>       <c>128</c>      <c>AES-CCM mode 128-bit key, 64-bit tag, 7-byte nonce</c>
          <c>AES-CCM-64-64-192</c>        <c>A882C</c>    <c>64</c>       <c>64</c>       <c>192</c>      <c>AES-CCM mode 192-bit key, 64-bit tag, 7-byte nonce</c>
          <c>AES-CCM-64-64-256</c>        <c>A883C</c>    <c>64</c>       <c>64</c>       <c>256</c>      <c>AES-CCM mode 256-bit key, 64-bit tag, 7-byte nonce</c>
          <c>AES-CCM-16-128-128</c>       <c>A2161C</c>   <c>16</c>       <c>128</c>      <c>128</c>      <c>AES-CCM mode 128-bit key, 128-bit tag, 13-byte nonce</c>
          <c>AES-CCM-16-128-192</c>       <c>A2162C</c>   <c>16</c>       <c>128</c>      <c>192</c>      <c>AES-CCM mode 192-bit key, 128-bit tag, 13-byte nonce</c>
          <c>AES-CCM-16-128-256</c>       <c>A2163C</c>   <c>16</c>       <c>128</c>      <c>256</c>      <c>AES-CCM mode 256-bit key, 128-bit tag, 13-byte nonce</c>
          <c>AES-CCM-64-128-128</c>       <c>A8161C</c>   <c>64</c>       <c>128</c>      <c>128</c>      <c>AES-CCM mode 128-bit key, 128-bit tag, 7-byte nonce</c>
          <c>AES-CCM-64-128-192</c>       <c>A8162C</c>   <c>64</c>       <c>128</c>      <c>192</c>      <c>AES-CCM mode 192-bit key, 128-bit tag, 7-byte nonce</c>
          <c>AES-CCM-64-128-256</c>       <c>A8163C</c>   <c>64</c>       <c>128</c>      <c>256</c>      <c>AES-CCM mode 256-bit key, 128-bit tag, 7-byte nonce</c>
        </texttable>

        <t>
          M00TODO: Make a determination of which ones get 1-, 2- or 3-byte identifiers.
          I.e. which ones are going to be popular.
        </t>

        <section title="Security Considerations">
          <t>
            When using AES-CCM the following restrictions MUST be enforced:
            <list style="symbols">
              <t>
                The key and nonce pair MUST be unique for every message encrypted.
              </t>
              <t>
                The total number of times the AES block cipher is used MUST NOT exceed 2^61 operations.
                This limitation is the sum of times the block cipher is used in computing the MAC value and in performing stream encryption operations.
                An explicit check is required only in environments where it is expected that it might be exceeded.
              </t>
            </list>
          </t>

          <t>
            <xref target="RFC3610"/> additionally calls out one other consideration of note.
            It is possible to do a pre-computation attack against the algorithm in cases where the portions encryption content is highly predictable.
            This reduces the security of the key size by half.
            Ways to deal with this attack include adding a random portion to the nonce value and/or increasing the key size used.
            Using a portion of the nonce for a random value will decrease the number of messages that a single key can be used for.
            Increasing the key size may require more resources in the constrained device.
            See sections 5 and 10 of <xref target="RFC3610"/> for more information.
          </t>
          
        </section>
      </section>
    </section>

    <section title="Key Derivation Functions (KDF)">

      <section title="HMAC-based Extract-and-Expand Key Derivation Function (HKDF)" anchor="HKDF">
        <t> 
          
          See <xref target="RFC5869"/>.
        </t>

        <t>
          Inputs:
          <list style="none">
            <t>
              secret - a shared value that is secret. 
              Secrets may be either previously shared or derived from operations like a DH key agreement.
            </t>

            <t>
              salt - an optional public value that is used to change the generation process.
              If specified, the salt is carried using the 'salt' algorithm parameter.
              While <xref target="RFC5869"/> suggests that the length of the salt be the same as the length of the underlying hash value, any amount of salt will improve the security as different key values will be generated.
              The 'salt' parameter is encoded as a binary string.
              This parameter is protected by being included in the key computation and does not need to be separately authenticated.
            </t>

            <t>
              length - the number of bytes of output that need to be generated.
            </t>

            <t>
              context information
            </t>

            <t>
              hash function - The underlying hash function to be used in the HKDF algorithm.
              The hash function is encoded into the HKDF algorithm selection.
            </t>

          </list>
        </t>

        <texttable title="HKDF algorithms" anchor="table-hkdf">
          <ttcol>name</ttcol>
          <ttcol>hash</ttcol>
          <ttcol>context</ttcol>
          <c>HKDF-256</c>       <c>SHA-256</c>  <c>XXX</c>
          <c>HKDF-512</c>       <c>SHA-512</c>  <c>XXX</c>
        </texttable>

        <texttable title="HKDF parameters">
          <ttcol>name</ttcol>
          <ttcol>label</ttcol>
          <ttcol>type</ttcol>
          <ttcol>description</ttcol>
          <c>salt</c>   <c>-20</c>      <c>bstr</c>     <c>Random salt</c>
        </texttable>
        

      </section>

      <section title="Context Information Structure" anchor="context">
        <t>
          The context information structure is used to ensure that the derived keying material is "bound" to the context of the transaction.
          The context information structure used here is based on that defined in <xref target="SP800-56A"/>.
          By using CBOR for the encoding of the context information structure, we automatically get the same type of type and length separation of fields that is obtained by the use of ASN.1.
          This means that there is no need to encode the lengths for the base elements as it is done by the CBOR encoding.
        </t>

        <t>
          The context information structure refers to PartyU and PartyV as the two parties which are doing the key derivation.
          Unless the application protocol defines differently, we assign PartyU to the entity that is creating the message and PartyV to the entity that is receiving the message.
          This is because we are assuming a set of stand alone store and forward messaging processes.
        </t>

        <t>
          Application protocols are free to define the roles differently.
          For example, they could assign the PartyU role to the entity that initiates the connection and allow directly sending multiple messages over the line without changing the role information.
        </t>
        
        <t>
          We encode the context specific information using a CBOR array type.
          The fields in the array are:

          <list style="hanging">
            <t hangText="AlgorithmID">
              This field indicates the algorithm for which the key material will be used.
              This field is required to be present and is a copy of the algorithm identifier in the message.
              The field exists in the context information so that if the same environment is used for different algorithms, then completely different keys will be generated each of those algorithms.
              (This practice means if algorithm A uses a shorter key than algorithm B and thus can be found easier, the key derived for algorithm B will not contain the key for algorithm A as a prefix.)
              <cref source="JLS">
                Unless key material is being derived for multiple items (i.e both a key and an IV) this will be the COSE algorithm value.
                Even then it might still be the COSE algorithm value, it is just a requirement for a new algorithm.
                Do we want to have the ability to derive both the key and a partial IV for CCM?
              </cref>
            </t>

            <t hangText="PartyUInfo">
              This field holds information about party U.
              The ParytUInfo structure is divided into three pieces:
              
              <list style="hanging">
                <t hangText="identity">
                  This contains the identity information for party U.
                  The identities can be assigned in one of two manners.
                  Firstly, a protocol can assign identities based on roles.
                  For example, the roles of "client" and "server" may be assigned to different entities in the protocol.
                  Each entity would then use the correct label for the data they they send or receive.
                  The second way is for a protocol to assign identities is to use a name based on a naming system (i.e. DNS, X.509 names).
                  <vspace/>
                  We define an algorithm parameter 'PartyU identity' that can be used to carry identity information in the message.
                  However, identity information is often known as part of the protocol and can thus be inferred rather than made explicit.
                  If identity information is carried in the message, applications SHOULD have a way of validating the supplied identity information.
                  The identity information does not need to be specified and can be left as absent.
                  <vspace/>
                  The identity value supplied will be validated as part of the key derivation process.
                  If the identity string is wrong, then the wrong key will be created.
                </t>

                <t hangText="nonce">
                  This contains a one time nonce value.
                  The nonce can either be implicit from the protocol or carried as a value in the unprotected headers.
                  <cref source="JLS">
                    I need to get a better justification for this item.
                    It has to do with generating new keys for each message in a series of messages that have the same salt value.
                  </cref>
                  <vspace/>
                  We define an algorithm parameter 'PartyU nonce' that can be used to carry this value in the message
                  However, the nonce value could be determined by the application and the value determined from elsewhere.
                  <vspace/>
                  This item is optional and can be absent.
                </t>

                <t hangText="other">
                  This contains other information that is defined by the protocol.
                  <vspace/>
                  This item is optional and can be absent.
                </t>
              </list>
            </t>

            <t hangText="PartyVInfo">
              M00TODO: Copy down from PartyUInfo when that text is ready.
            </t>

            <t hangText="SuppPubInfo">
              This field contains public information that is mutually known to both parties.
              
              <list style="hanging">
                <t hangText="keyDataLength">
                  This is set to the number of bits of the desired output value.
                </t>


                <t hangText="other">
                  The field other is for free form data defined by the application.
                  An example is that an application could defined two different strings to be placed here to generate different keys for a data stream vs a control stream.
                  This field is optional and will only be present if the application defines a structure for this information.
                  Applications that define this SHOULD use CBOR to encode the data so that types and lengths are correctly include.
                </t>
              </list>
            </t>

            <t hangText="SuppPrivInfo">
              This field contains private information that is mutually known information.
              An example of this information would be a pre-existing shared secret.
              The field is optional and will only be present if the application defines a structure for this information.
              Applications that define this SHOULD use CBOR to encode the data so that types and lengths are correctly include.
            </t>
          </list>
        </t>

        <figure><artwork type='CDDL'>
<![CDATA[
COSE_KDF_Context = [
    AlgorithmID : int / tstr,
    PartyUInfo : [
        ? nonce : bstr / int,
        ? identity : bstr,
        ? other : bstr
    ],
    PartyVInfo : [
        ? nonce : bstr,
        ? identity : bstr / tstr,
        ? other : bstr
    ],
    SuppPubInfo : [
        keyDataLength : uint,
        ? other : bstr
    ],
    ? SuppPrivInfo : bstr
]
]]></artwork></figure>

        <texttable title="Context Algorithm Parameters">
          <ttcol>name</ttcol>
          <ttcol>label</ttcol>
          <ttcol>type</ttcol>
          <ttcol>description</ttcol>
          <c>PartyU identity</c>   <c>-21</c>      <c>bstr</c>          <c>Party U identity Information</c>
          <c>PartyU nonce</c>      <c>-22</c>      <c>bstr / int</c>    <c>Party U provided nonce</c>
          <c>PartyU other</c>      <c>-23</c>      <c>bstr</c>          <c>Party U other provided information</c>
          <c>PartyV identity</c>   <c>-24</c>      <c>bstr</c>          <c>Party V identity Information</c>
          <c>PartyV nonce</c>      <c>-25</c>      <c>bstr / int</c>    <c>Party V provided nonce</c>
          <c>PartyV other</c>      <c>-26</c>      <c>bstr</c>          <c>Party V other provided information</c>
        </texttable>

      </section>
    </section>

    <section title="Key Management Algorithms">
      <t>
        There are a number of different key management methods that can be used in the COSE encryption system.
        In this section we will discuss each of the key management methods, what fields need to be specified, and which algorithms are defined in this document to deal with each of them.
      </t>

      <t>
        The names of the key management methods used here are the same as are defined in <xref target="RFC7517"/>.
        Other specifications use different terms for the key management methods or do not support some of the key management methods.
      </t>

      <t>
        At the moment we do not have any key management methods that allow for the use of protected headers. 
        This may be changed in the future if, for example, the AES-GCM Key wrap method defined in <xref target="RFC7518"/> were extended to allow for authenticated data. 
        In that event, the use of the 'protected' field, which is current forbidden below, would be permitted.
      </t>

      <section title="Direct Encryption">
          <t>
            In direct encryption mode, a shared secret between the sender and the recipient is used as the key.
            <cref source="JLS">It would be reasonable to support a shared-secret + KDF that is not PBE for when one has good randomness in the shared-secret.</cref>
            When direct encryption mode is used, it MUST be the only mode used on the message.
            It is a massive security leak to have both direct encryption and a different key management mode on the same message.
          </t>

          <t>
            For JOSE, direct encryption key management is the only key management method allowed for doing MACed messages.
            In COSE, all of the key management methods can be used for MACed messages.
          </t>

          <t>
            The COSE_encrypt structure for the recipient is organized as follows:
          </t>

          <t>
            <list style="symbols">
              <t>
                The 'protected', 'ciphertext' and 'recipients' fields MUST be absent.
              </t>
              <t>
                At a minimum, the 'unprotected' field MUST contain the 'alg' parameter and SHOULD contain a parameter identifying the shared secret.
              </t>
            </list>
          </t>

            

          <section title="Direct Key">
            <t>
              We define two key agreement algorithms that function as direct key algorithms.
              These algorithms are:
              <list style="hanging">
                <t hangText="Direct:">
                  This key management technique is the simplest method, the supplied key is directly used as the key for the next layer down in the message.
                  There are no algorithm parameters defined for this key management methods.
                </t>

                <t hangText="Direct KDF:">
                  This key managment takes a common shared secret between the two parties and applies the HKDF function (<xref target="HKDF"/>) using the context structure defined in <xref target="context"/> to transform the shared secret into the necessary key.
                  Either the 'salt' parameter of HKDF or the partyU 'nonce' parameter of the context structure MUST be present.
                  This parameter can be generated either randomly or deterministically, the requirement is that it be a unique value for the key pair in question.
                  <vspace/>
                  If the salt/nonce value is generated randomly, then it is suggested that the length of the random value be the same length as the hash function underlying HKDF, i.e 256-bits.
                  While there is no way to guarantee that it will be unique, there is a high probability that it will be unique.
                  If the salt/nonce value is generated deterministically, it can be guaranteed to be unique and thus there is no length requirement.
                </t>
              </list>
            </t>

            <texttable title="Direct Key" anchor="table-direct">
              <ttcol align='left'>name</ttcol>
              <ttcol align='left'>value</ttcol>
              <ttcol align='left'>KDF</ttcol>
              <ttcol align='left'>description</ttcol>
              <c>direct</c>          <c>-6</c>       <c>N/A</c>    <c>Direct use of CEK</c>
              <c>direct+KDF</c>      <c>*</c>        <c>HKDF SHA-256</c>   <c>Shared secret w/ KDF</c>
            </texttable>

            <section title="Security Considerations">
              <t>Lifetime, Length, Compromise</t>
            </section>
          </section>
      </section>

      <section title="Key Wrapping">
        <t>
          In key wrapping mode, the CEK is randomly generated and that key is then encrypted by a shared secret between the sender and the recipient.
          All of the currently defined key wrapping algorithms for JOSE (and thus for COSE) are AE algorithms.
          Key wrapping mode is considered to be superior to direct encryption if the system has any capability for doing random key generation.
          This is because the shared key is used to wrap random data rather than data  has some degree of organization and may in fact be repeating the same content.
        </t>

        <t>
          The COSE_encrypt structure for the recipient is organized as follows:
        </t>

        <t>
          <list style="symbols">
            <t>
              The 'protected' field MUST be absent if the key wrap algorithm is an AE algorithm.
            </t>
            <t>
              The 'recipients' field is normally absent, but can be used.
              Applications MUST deal with a recipients field present, not being able to decrypt that recipient is an acceptable way of dealing with it.
              Failing to process the message is not an acceptable way of dealing with it.
            </t>
            <t>
              The plain text to be encrypted is the key from next layer down
              (usually the content layer).
            </t>
            <t>
              At a minimum, the 'unprotected' field MUST contain the 'alg'
              parameter and SHOULD contain a parameter identifying the shared secret.
            </t>
          </list>
        </t>

        <section title="AES Key Wrapping">
          <t>
            The AES Key Wrapping algorithm is defined in <xref target="RFC3394"/>.
            This algorithm uses an AES key to wrap a value that is a multiple of 64-bits, as such it can be used to wrap a key for any of the content encryption algorithms defined in this document.
            <cref source="JLS">
              Do we also want to document the use of RFC 5649 as well?  
              It allows for other sizes of keys that might be used for HMAC - i.e. a 200 bit key.
              The algorithm exists, but I do not personally know of any standard uses of it.
            </cref>
            The algorithm requires a single fixed parameter, the initial value.
            This is fixed to the value specified in Section 2.2.3.1 of  <xref target="RFC3394"/>.
            There are no public parameters that vary on a per invocation basis.
          </t>
          
          <texttable title="AES Key Wrap Algorithm Values" anchor="table_aes_keywrap">
            <ttcol align='left'>name</ttcol>
            <ttcol align='left'>value</ttcol>
            <ttcol align='left'>key size</ttcol>
            <ttcol align='left'>description</ttcol>
            <c>A128KW</c>       <c>-3</c>       <c>128</c>      <c>AES Key Wrap w/ 128-bit key</c>
            <c>A192KW</c>       <c>-4</c>       <c>192</c>      <c>AES Key Wrap w/ 192-bit key</c>
            <c>A256KW</c>       <c>-5</c>       <c>256</c>      <c>AES Key Wrap w/ 256-bit key</c>
          </texttable>

          <section title="Security Considerations for AES-KW">
            <t>
              There are no specific security considerations for this algorithm.
            </t>
          </section>
        </section>
      </section>

      <section title="Key Encryption">
        <t>
          Key Encryption mode is also called key transport mode in some
          standards.
          Key Encryption mode differs from Key Wrap mode in that it uses an
          asymmetric encryption algorithm rather than a symmetric encryption
          algorithm to protect the key.
          The only current Key Encryption mode algorithm supported is RSAES-OAEP.
        </t>

        <t>
          The COSE_encrypt structure for the recipient is organized as follows:
        </t>

        <t>
          <list style="symbols">
            <t>
              The 'protected' field MUST be absent.
            </t>
            <t>
              The plain text to be encrypted is the key from next layer down
              (usually the content layer).
            </t>
            <t>
              At a minimum, the 'unprotected' field MUST contain the 'alg'
              parameter and SHOULD contain a parameter identifying the asymmetric key.
            </t>
          </list>
        </t>

        <section title="RSA OAEP">
          <texttable anchor="table-RSA-OAEP" title="RSA OAEP Algorithm Values">
            <ttcol align='left'>name</ttcol>
            <ttcol align='left'>value</ttcol>
            <ttcol align='left'>description</ttcol>
            <c>RSA-OAEP</c>     <c>-2</c>       <c>RSAES OAEP w/ SHA-256</c>
          </texttable>

          <section title="Security Considerations for RSA OAEP">
            <t>
              A key size of 2048 bits or larger MUST be used with this algorithm.
              This key size corresponds roughly to the same strength as provided by a 128-bit symmetric encryption algorithm.
            </t>

            <t>
              It is highly recommended that checks on the key length  be done before starting a decryption operation.
              One potential denial of service operation is to provide encrypted objects using either abnormally long or oddly sized RSA modulus values.
              Implementations SHOULD be able to encrypt and decrypt with modulus between 2048 and 16K bits in length.<cref source="JLS">Is this range we want to specify?</cref>
              Applications can impose additional restrictions on the length of the modulus.
            </t>
          </section>
        </section>

      </section>

      <section title="Direct Key Agreement">
        <t>
          When using the 'Direct Key Agreement' key managment method, the two parties use a key agreement method to create a shared secret.
          A KDF is then applied to the shared secret to derive a key to be used in protecting the data.
          This key is normally used as a CEK or MAC key, but could be used for other purposes if more than two layers are in use (see <xref target="three-layer"/>).
        </t>

        <t>
          The most commonly used key agreement algorithm used is Diffie-Hellman, but other variants exist.
          Since COSE is designed for a store and forward environment rather than an on-line environment, many of the DH variants cannot be used as the receiver of the message cannot provide any key material.
          One side-effect of this is that perfect forward security is not achievable, a static key will always be used for the receiver of the COSE message.
        </t>

        <t>
          Two variants of DH that are easily supported are:
          <list>
            <t>
              Ephemeral-Static DH: where the sender of the message creates a one time DH key and uses a static key for the recipient.
              The use of the ephemeral sender key means that no additional random input is needed as this is randomly generated for each message.
            </t>
            <t>
              Static-Static DH: where a static key is used for both the sender and the recipient.
              The use of static keys allows for recipient to get a weak version of data origination for the message.
              When static-static key agreement is used, then some piece of unique data is require to ensure that a different key is created for each message
            </t>
          </list>
          In this specification, both variants are specified.
          This has been done to provide the weak data origination option for use with MAC operations.
        </t>

        <t>
          When direct key agreement mode is used, it MUST be the only key management mode used on the message and there MUST be only one recipient.
          This method creates the key directly and that makes it difficult to mix with additional recipients.
          If multiple recipients are needed, then the version with key wrap (<xref target="ECDH-KeyWrap"/>) needs to be used.
        </t>

        <t>
          The COSE_encrypt structure for the recipient is organized as follows:
        </t>

        <t>
          <list style="symbols">
            <t>
              The 'protected' field MUST be absent.
            </t>
            <t>
              At a minimum, the 'unprotected' field MUST contain the 'alg' parameter and SHOULD contain a parameter identifying the recipient's asymmetric key.
            </t>
            <t>
              The 'unprotected' field MUST contain the 'epk' parameter.
            </t>
          </list>
        </t>

        <section title="ECDH">
          <t>
            NOTE: Curves 25519 and Goldilocks are elements at risk.
          </t>
          
          <t>
            We define one set of key agreement algorithms structured around Elliptic Curves Diffie-Hellman problem.
            <cref source="JLS">Does anybody need pure DH?</cref>
            We define both an ephemeral-static and a static-static version of these algorithms.
            We allow for multiple curves to be used, it needs to be noted that the math required for the curves as well as the point representation is going to be different.
            <cref source="JLS">
              This could just as easily be done by specifying two different set of algorithm identifiers, one for each of the key formats.
              I don't believe that we need to set things up by having two different sets of algorithm identifiers for the different keys as the structure of what is represented is going to be the same, just the math and point formats are going to be different.
              The other "difference" is the question of how the octet string of the shared secret is defined. 
              However, since we don't need to specify either in this document we can defer both of them into their respective documents.
            </cref>
          </t>
          
          <t>
            We setup to use two different curve structures for the ECDH algorithms.
            <list style="none">
              <t>
                Weierstrass Curves: These are the ones one is used to seeing from NIST.
                We define three NIST curves for use with this document.
                These curves are P-256, P-384 and P-512.
                (The mathematics can be found in <xref target="RFC6090"/>.)
                For these curves, the key type 'EC2' is used (<xref target="EC2-Keys"/>).
              </t>
              
              <t>
                Montgomery Curves:
                These curves are Curve25519 and Goldilocks.
                (The mathematics can be found in <xref target="I-D.irtf-cfrg-curves"/>.)
                For these curves, the key type 'EC1' is used (<xref target="EC1-Keys"/>).
              </t>
            </list>
          </t>

          <t>
            As shown in <xref target="table-ecdh-es-table"/> we define two ECDH algorithm identifiers for EC direct key agreement.
            These identifiers are:
            <list style="hanging">
              <t hangText="ECDH-ES:">
                This algorithm does a key agreement operation using a static key for the recipient and an ephemeral key for the sender.
                The ephemeral key MUST be generated fresh for every message.
                The HKDF function (<xref target="HKDF"/>) is used with the context structure in <xref target="context"/> to transform the key agreement secret into the necessary key.
                Since the ephemeral key is generated freshly, the 'salt' parameter of HKDF is not needed and can be absent.
                <vspace/>
                One new algorithm parameter is defined for use with this algorithm.
                This parameter is:
                <list style="hanging">
                  <t hangText="ephemeral key:">
                    This parameter is used to hold and transport the ephemeral key generated by the sender of the message.
                    This parameter has a label of -1 and a type of COSE_Key.
                    This parameter can be placed in the unprotected bucket, if it is changed then the correct key will not be able to be generated.
                  </t>
                </list>
                The parameter is summarized in <xref target="table-ecdh-es-parameter-table"/>.
              </t>
              <t hangText="ECDH-SS:">
                This algorithm does a key agreement operation using two static keys, one for the recipient and one for the sender.
                The HKDF function (<xref target="HKDF"/>) is used with the context structure in <xref target="context"/> to transform the key agreement secret into the necessary key.
                Either the 'salt' parameter of HKDF or the partyU 'nonce' parameter of the context structure MUST be present.
                This parameter can be generated either randomly or deterministically, the requirement is that it be a unique value for the key pair in question.
                <vspace/>
                If the salt/nonce value is generated randomly, then it is suggested that the length of the random value be the same length as the hash function underlying HKDF, i.e 256-bits.
                While there is no way to guarantee that it will be unique, there is a high probability that it will be unique.
                If the salt/nonce value is generated deterministically, it can be guaranteed to be unique and thus there is no length requirement.
                <vspace/>
                Two new algorithm parameters are defined for use with this algorithm.
                These parameters are:

                <list style="hanging">
                  <t hangText="static key:">
                    This parameter is used to hold and transport the static key used by the sender of the message.
                    This parameter has the label of -2 and a type of COSE_Key.
                    The parameter can be placed in the unprotected bucket, if it is changed then the correct key will not be able to be generated.
                    If the data origination service is desired, then the message recipient needs to validate that the key in this field is associated with the sender.
                  </t>

                  <t hangText="static key identifier:">
                    This parameter is used to hold a reference to the static key used by the sender of the message.
                    The value is expected to match the 'kid' member of a COSE_Key structure published by the sender.
                    The value in this field cannot be assumed to uniquely identify a single key, multiple keys may need to be found and tested.
                    Not all of the keys identified by a kid value may be associated with the sender of the message.
                    If the data origination service is desired, then the message recipient needs to validate that the key in this field is associated with the sender.
                  </t>
                </list>
                These parameters are summarized in <xref target="table-ecdh-es-parameter-table"/>.
              </t>
            </list>
          </t>

          <texttable title="ECDH Algorithm Values" anchor="table-ecdh-es-table">
            <ttcol align='left'>name</ttcol>
            <ttcol align='left'>value</ttcol>
            <ttcol align='left'>KDF</ttcol>
            <ttcol align='left'>description</ttcol>
            <c>ECDH-ES</c>      <c>ECDH-ES</c>        <c>HKDF - SHA-256</c>     <c>ECDH ES w/ HKDF - generate key directly</c>
            <c>ECDH-SS</c>      <c>ECDH-SS</c>        <c>HKDF - SHA-256</c>     <c>ECDH SS w/ HKDF - generate key directly</c>
          </texttable>

          <texttable title="ECDH Algorithm Parameters" anchor="table-ecdh-es-parameter-table">
            <ttcol>name</ttcol>
            <ttcol>label</ttcol>
            <ttcol>type</ttcol>
            <ttcol>algorithm</ttcol>
            <ttcol>description</ttcol>
            <c>ephemeral key</c>        <c>-1</c>       <c>COSE_Key</c>         <c>ECDH-ES</c>  <c>Ephemeral Public key for the sender</c>
            <c>static key</c>           <c>-2</c>       <c>COSE_Key</c>         <c>ECDH-ES</c>  <c>Static Public key for the sender</c>
            <c>static key id </c>       <c>-3</c>       <c>bstr</c>             <c>ECDH-SS</c>  <c>Static Public key identifier for the sender</c>
          </texttable>

          <t>
            M00TODO: Talk about curves and point formats.
          </t>

          <texttable title="EC Curves" anchor="table-ec-curves">
            <ttcol>name</ttcol>
            <ttcol>key type</ttcol>
            <ttcol>value</ttcol>
            <ttcol>description</ttcol>
            <c>P-256</c>        <c>EC2</c>      <c>1</c>       <c>NIST P-256 also known as ....</c>
            <c>P-384</c>        <c>EC2</c>      <c>2</c>       <c>NIST P-384 also known as ....</c>
            <c>P-521</c>        <c>EC2</c>      <c>3</c>       <c>NIST P-512 also known as ....</c>
            <c>Curve25519</c>   <c>EC1</c>      <c>1</c>       <c>Provide reference</c>
            <c>Goldilocks</c>   <c>EC1</c>      <c>2</c>       <c>Provide reference</c>
          </texttable>

        </section>
      </section>

      <section title="Key Agreement with KDF" anchor="ECDH-Direct">
        <t>
          Key Agreement with Key Wrapping uses a randomly generated CEK.
          The CEK is then encrypted using a Key Wrapping algorithm and a key derived from the shared secret computed by the key agreement algorithm.
        </t>

        <t>
          The COSE_encrypt structure for the recipient is organized as follows:
        </t>

        <t>
          <list style="symbols">
            <t>
              The 'protected' field MUST be absent if the key wrap algorithm is an AE algorithm.
              <cref source="JLS">
                It would be possible to include the protected field in the KDF rather than the key wrap algorithm if we wanted to.
                This would provide the same level of security, it would not be possible to get the same key if they are different.
              </cref>
            </t>
            <t>
              The plain text to be encrypted is the key from next layer down (usually the content layer).
            </t>
            <t>
              At a minimum, the 'unprotected' field MUST contain the 'alg' parameter, a parameter identifying the recipient asymmetric key, and a parameter with the sender's asymmetric public key.
            </t>
          </list>
        </t>

        <section title="ECDH ES + HKDF" anchor="ECDH-KeyWrap">
          <texttable>
            <ttcol align='left'>name</ttcol>
            <ttcol align='left'>value</ttcol>
            <ttcol>KDF</ttcol>
            <ttcol align='left'>description</ttcol>
            <c>ECDH-ES+A128KW</c>        <c>*</c>        <c>HKDF - SHA-256</c>          <c>ECDH ES w/ Concat KDF and AES Key wrap w/ 128 bit key</c>
            <c>ECDH-ES+A192KW</c>        <c>*</c>        <c>HKDF - SHA-256</c>          <c>ECDH ES w/ Concat KDF and AES Key wrap w/ 192 bit key</c>
            <c>ECDH-ES+A256KW</c>        <c>*</c>        <c>HKDF - SHA-256</c>          <c>ECDH ES w/ Concat KDF and AES Key wrap w/ 256 bit key</c>
          </texttable>
        </section>
      </section>

      <section title="Password">
        <t>
          <cref source="JLS">
            Do we want/need to support this?
            JOSE did it mainly to support the encryption of private keys.
          </cref>
        </t>
        
        <section title="PBES2">
          <texttable>
            <ttcol align='left'>name</ttcol>
            <ttcol align='left'>value</ttcol>
            <ttcol align='left'>description</ttcol>
            <c>PBES2-HS256+A128KW</c>        <c>*</c>        <c>PBES2 w/ HMAC SHA-256 and AES Key wrap w/ 128 bit key</c>
            <c>PBES2-HS384+A192KW</c>        <c>*</c>        <c>PBES2 w/ HMAC SHA-384 and AES Key wrap w/ 192 bit key</c>
            <c>PBES2-HS512+A256KW</c>        <c>*</c>        <c>PBES2 w/ HMAC SHA-512 and AES Key wrap w/ 256 bit key</c>
          </texttable>
        </section>
      </section>
    </section>

    <section title="Keys">
      <t>
        The COSE_Key object defines a way to hold a single key object, it is still required that the members of individual key types be defined.
        This section of the document is where we define an initial set of members for specific key types.
      </t>

      <t>
        For each of the key types, we define both public and private members.
        The public members are what is transmitted to others for their usage.
        We define private members mainly for the purpose of archival of keys by individuals.
        However, there are some circumstances where private keys may be distributed by various entities in a protocol.
        Examples include:  Entities which have poor random number generation.
        Centralized key creation for multi-cast type operations.
        Protocols where a shared secret is used as a bearer token for authorization purposes.
      </t>

      <t>
        Keys are identified by the 'kty' member of the COSE_Key object.
        In this document we define four values for the member.
      </t>

      <texttable title="Key Type Values" anchor="table_key_types">
        <ttcol>name</ttcol>
        <ttcol>value</ttcol>
        <ttcol>description</ttcol>
        <c>EC1</c>      <c>1</c>        <c>Elliptic Curve Keys w/ X Coordinate only</c>
        <c>EC2</c>      <c>2</c>        <c>Elliptic Curve Keys w/ X,Y Coordinate pair</c>
        <c>RSA</c>      <c>3</c>        <c>RSA Keys</c>
        <c>Symmetric</c><c>4</c>        <c>Symmetric Keys</c>
      </texttable>
      
      <section title="Elliptic Curve Keys">
        <t>
          Two different key structures are being defined for Elliptic Curve keys.
          One version uses both an x and a y coordinate, potentially with point compression.
          This is the traditional EC point representation that is used in [EC-in-PKIX].
          The other version uses only the x coordinate as the y coordinate is either to be recomputed or not needed for the key agreement operation.
          An example of this is [Curve25519].
        </t>
        
        <section title="Single Coordinate Curves" anchor="EC1-Keys">
          <t>
            NOTE: This section represents at risk work depending on the ability to get good references for Curve25519 and Goldilocks.
          </t>
          
          <t>
            New versions of ECC have been targeted at variants where only a single value of the EC Point need to be transmitted.
            This work is currently going on in the IRTF CFRG group.
          </t>
          
          <t>
            For EC keys with both coordinates, the 'kty' member is set to 1 (EC1).
            The members that are defined for this key type are:
            <list style="hanging">
              <t hangText="crv">
                contains an identifier of the curve to be used with the key.
                <cref source="JLS">
                  Do we create a registry for curves?
                  Is is the same registry for both EC1 and EC2?
                </cref>
                The curves defined in this document for this key type can be found in <xref target="table-ec-curves"/>.
                Other curves may be registered in the future and private curves can be used as well.
              </t>
              
              <t hangText="x">
                contains the x coordinate for the EC point.
                The integer is converted to an octet string as defined in <xref target="SEC1"/>.
                Zero octets MUST NOT be removed from the front of the octet string.
                <cref source="JLS">
                  Should we use the integer encoding for x, y and d instead of bstr?
                </cref>
              </t>
              
              <t hangText="y">
                contains either the sign bit or the value of y coordinate for the EC point.
                For the value, the integer is converted to an octet string as defined in <xref target="SEC1"/>.
                Zero octets MUST NOT be removed from the front of the octet string.
                For the sign bit, the value is true if the value of y is positive.
              </t>
              
              <t hangText="d">
                contains the private key.
              </t>
              
            </list>
          </t>

          <t>
            For public keys, it is REQUIRED that 'crv' and  'x' be present in the structure.
            For private keys, it is REQUIRED that 'crv' and 'd' be present in the structure.
            It is RECOMMENDED that 'x'  also be present, but it can be recomputed from the required elements and omitting it saves on space.
          </t>
          
          <texttable title="EC Key Parameters" anchor="table-ec1-keys">
            <ttcol>name</ttcol>
            <ttcol>key type</ttcol>
            <ttcol>value</ttcol>
            <ttcol>type</ttcol>
            <ttcol>description</ttcol>
            <c>crv</c>    <c>1</c>      <c>-1</c>       <c>int / tstr</c>       <c>EC Curve identifier - Taken from the COSE General Registry</c>
            <c>x</c>      <c>1</c>      <c>-2</c>       <c>bstr</c>             <c>X Coordinate</c>
            <c>d</c>      <c>1</c>      <c>-4</c>       <c>bstr</c>             <c>Private key</c>
          </texttable>
        </section>

        <section title="Double Coordinate Curves" anchor="EC2-Keys">
          <t>
            The traditional way of sending EC curves has been to send either both the x and y coordinates, or the x coordinate and a sign bit for the y coordinate.
            The latter encoding has not been recommend in the IETF due to potential IPR issues with Certicom.
            However, for operations in constrained environments, the ability to shrink a message by not sending the y coordinate is potentially useful.
          </t>
          <t>
            For EC keys with both coordinates, the 'kty' member is set to 2 (EC2).
            The members that are defined for this key type are:
            <list style="hanging">
              <t hangText="crv">
                contains an identifier of the curve to be used with the key.
                The curves defined in this document for this key type can be found in <xref target="table-ec-curves"/>.
                Other curves may be registered in the future and private curves can be used as well.
              </t>
              
              <t hangText="x">
                contains the x coordinate for the EC point.
                The integer is converted to an octet string as defined in <xref target="SEC1"/>.
                Zero octets MUST NOT be removed from the front of the octet string.
                <cref source="JLS">
                  Should we use the integer encoding for x, y and d instead of bstr?
                </cref>
              </t>
              
              <t hangText="y">
                contains either the sign bit or the value of y coordinate for the EC point.
                For the value, the integer is converted to an octet string as defined in <xref target="SEC1"/>.
                Zero octets MUST NOT be removed from the front of the octet string.
                For the sign bit, the value is true if the value of y is positive.
              </t>
              
              <t hangText="d">
                contains the private key.
              </t>
              
            </list>
          </t>

          <t>
            For public keys, it is REQUIRED that 'crv', 'x' and 'y' be present in the structure.
            For private keys, it is REQUIRED that 'crv' and 'd' be present in the structure.
            It is RECOMMENDED that 'x' and 'y' also be present, but they can be recomputed from the required elements and omitting them saves on space.
          </t>

          
          <texttable title="EC Key Parameters" anchor="table-ec2-keys">
            <ttcol>name</ttcol>
            <ttcol>key type</ttcol>
            <ttcol>value</ttcol>
            <ttcol>type</ttcol>
            <ttcol>description</ttcol>
            <c>crv</c>    <c>2</c>      <c>-1</c>       <c>int / tstr</c>       <c>EC Curve identifier - Taken from the COSE General Registry</c>
            <c>x</c>      <c>2</c>      <c>-2</c>       <c>bstr</c>             <c>X Coordinate</c>
            <c>y</c>      <c>2</c>      <c>-3</c>       <c>bstr / bool</c>      <c>Y Coordinate</c>
            <c>d</c>      <c>2</c>      <c>-4</c>       <c>bstr</c>             <c>Private key</c>
          </texttable>
        </section>
      </section>

      <section title="RSA Keys">
        <texttable title="RSA Key Parameters" anchor="table-rsa-keys">
          <ttcol>name</ttcol>
          <ttcol>value</ttcol>
          <ttcol>type</ttcol>
          <ttcol>description</ttcol>
          <c>n</c>      <c>-1</c>       <c>bstr</c>             <c>Modulus Parameter</c>
          <c>e</c>      <c>-2</c>       <c>int</c>              <c>Exponent Parameter</c>
          <c>d</c>      <c>-3</c>       <c>bstr</c>             <c>Private Exponent Parameter</c>
          <c>p</c>      <c>-4</c>       <c>bstr</c>             <c>First Prime Factor</c>
          <c>q</c>      <c>-5</c>       <c>bstr</c>             <c>Second Prime Factor</c>
          <c>dp</c>     <c>-6</c>       <c>bstr</c>             <c>First Factor CRT Exponent</c>
          <c>dq</c>     <c>-7</c>       <c>bstr</c>             <c>Second Factor CRT Exponent</c>
          <c>qi</c>     <c>-8</c>       <c>bstr</c>             <c>First CRT Coefficient</c>
          <c>other</c>  <c>-9</c>       <c>array</c>            <c>Other Primes Info</c>
          <c>r</c>      <c>-10</c>      <c>bstr</c>             <c>Prime Factor</c>
          <c>d</c>      <c>-11</c>      <c>bstr</c>             <c>Factor CRT Exponent</c>
          <c>t</c>      <c>-12</c>      <c>bstr</c>             <c>Factor CRT Coefficient</c>
        </texttable>
      </section>

      <section title="Symmetric Keys">
        <t>
          Occasionally it is required that a symmetric key be transported between entities.
          This key structure allows for that to happen.
        </t>

        <t>
          For symmetric keys, the 'kty' member is set to 3 (Symmetric).
          The member that is defined for this key type is:
          <list style="hanging">
            <t hangText="k">
              contains the value of the key.
            </t>
          </list>
        </t>

        <t>
          This key structure contains only private key information, care must be taken that it is never transmitted accidentally.
          For public keys, there are no required fields.
          For private keys, it is REQUIRED that 'k' be present in the structure.
        </t>
        
        <texttable title="Symmetric Key Parameters" anchor="table-symmetric-keys">
          <ttcol>name</ttcol>
          <ttcol>value</ttcol>
          <ttcol>type</ttcol>
          <ttcol>description</ttcol>
          <c>k</c>      <c>-1</c>       <c>bstr</c>             <c>Key Value</c>
        </texttable>
      </section>
    </section>
    
    <section anchor="iana-considerations" title="IANA Considerations">

      <section anchor="cbor-tag-assignment" title="CBOR Tag assignment">

        <t>
          It is requested that IANA assign a new tag from the “Concise Binary Object Representation (CBOR) Tags” registry.  It is requested that the tag be assigned in the 0 to 23 value range.
        </t>

        <t>
          Tag Value:  TBD1
        </t>

        <t>
          Data Item: COSE_Msg
        </t>

        <t>
          Semantics: COSE security message.
        </t>

      </section>

      
      <section anchor="IANA-Top-Level-Keys" title="COSE Object Labels Registry">

        <t>
          It is requested that IANA create a new registry entitled “COSE Object Labels Registry”.
          <cref source="JLS">Finish the registration process.</cref>
        </t>

        <t>
          This table is initially populated by the table in <xref target="Top-Level-Keys"/>.
        </t>

      </section>
      
      <section anchor="cose-header-key-table" title="COSE Header Label Table">

        <t>
          It is requested that IANA create a new registry entitled “COSE Header Labels”.
        </t>

        <t>
          <list style="hanging">
            <t hangText='The columns of the registry are:'>
              
            </t>
            <t hangText='name'>
              The name is present to make it easier to refer to and discuss the registration entry.  The value is not used in the protocol.  Names are to be unique in the table.
            </t>
            <t hangText='label'>
              This is the value used for the label.
              The label can be either an integer or a string.
              Registration in the table is based on the value of the label requested.
              Integer values between 1 and 255 and strings of length 1 are designated as Standards Track Document required.
              Integer values from 256 to 65535 and strings of length 2 are designated as Specification Required.
              Integer values of greater than 65535 and strings of length greater than 2 are designated as first come first server.
              Integer values in the range -1 to -65536 are delegated to the “COSE Header Algorithm Label” registry.
              Integer values beyond -65536 are marked as private use.
            </t>
            <t hangText='value'>
              This contains the CBOR type for the value portion of the label.
            </t>
            <t hangText='value registry'>
              This contains a pointer to the registry used to contain values where the set is limited.
            </t>
            <t hangText='description'>
              This contains a brief description of the header field.
            </t>
            <t hangText='specification'>
              This contains a pointer to the specification defining the header field (where public).
            </t>
          </list>
        </t>

        <t>
          The initial contents of the registry can be found in <xref target="Header-Table"/>.
          The specification column for all rows in that table should be this document.
        </t>

        <t>
          Additionally, the value of 0 is to be marked as 'Reserved'.
        </t>

        <t>
          NOTE: Need to review the range assignments.  It does not necessarily make sense as specification required uses 1 byte positive integers and 2 byte strings.
        </t>

      </section>

      
      <section anchor="IANA-Alg-Registry" title="COSE Header Algorithm Label Table">

        <t>
          It is requested that IANA create a new registry entitled “COSE Header Algorithm Labels”.
        </t>

        <t>
          <list style="hanging">
            <t hangText='The columns of the registry are:'>
              
            </t>
            <t hangText='name'>
              The name is present to make it easier to refer to and discuss the registration entry.  The value is not used in the protocol.
            </t>
            <t hangText='algorithm'>
              The algorithm(s) that this registry entry is used for.
              This value is taken from the “COSE Algorithm Value” registry.
              Multiple algorithms can be specified in this entry.
              For the table, the algorithm, label pair MUST be unique.
            </t>
            <t hangText='label'>
              This is the value used for the label.
              The label is an integer in the range of -1 to -65536.
            </t>
            <t hangText='value'>
              This contains the CBOR type for the value portion of the label.
            </t>
            <t hangText='value registry'>
              This contains a pointer to the registry used to contain values where the set is limited.
            </t>
            <t hangText='description'>
              This contains a brief description of the header field.
            </t>
            <t hangText='specification'>
              This contains a pointer to the specification defining the header field (where public).
            </t>
          </list>
        </t>

        <t>
          The initial contents of the registry can be found in <xref target="Header-Algorithm-Table"/>.  The specification column for all rows in that table should be this document.
        </t>

      </section>
      <section anchor="cose-algorithm-registry" title="COSE Algorithm Registry">

        <t>
          It is requested that IANA create a new registry entitled “COSE Algorithm Registry”.
        </t>

        <t>
          <list style="hanging">
            <t hangText='The columns of the registry are:'>
              
            </t>
            <t hangText='value'>
              The value to be used to identify this algorithm.
              Algorithm values MUST be unique.
              The value can be a positive integer, a negative integer or a string.
              Integer values between 0 and 255 and strings of length 1 are designated as Standards Track Document required.
              Integer values from 256 to 65535 and strings of length 2 are designated as Specification Required.
              Integer values of greater than 65535 and strings of length greater than 2 are designated as first come first server.
              Integer values in the range -1 to -65536 are delegated to the “COSE Header Algorithm Label” registry.
              Integer values beyond -65536 are marked as private use.
            </t>
            <t hangText='description'>
              A short description of the algorithm.
            </t>
            <t hangText='specification'>
              A document where the algorithm is defined (if publicly available).
            </t>
          </list>
        </t>

        <t>
          The initial contents of the registry can be found in the following: <xref target="table-AES-CCM"/>, <xref target="table-AES-GCM"/>, <xref target="table_ecdsa"/>, <xref target="table-hmac"/>, <xref target="table-direct"/>, <xref target="table_aes_keywrap"/>, <xref target="table-RSA-OAEP"/>.
          The specification column for all rows in that table should be this document.
        </t>

      </section>
      <section anchor="cose-key-map-registry" title="COSE Key Map Registry">

        <t>
          It is requested that IANA create a new registry entitled “COSE Key Map Registry”.
        </t>

        <t>
          The columns of the registry are:
        </t>

        <t>
          <list style="hanging">
            <t hangText='name'>
              This is a descriptive name that enables easier reference to the item.  It is not used in the encoding.
            </t>
            <t hangText='label'>
              The value to be used to identify this algorithm.
              Key map labels MUST be unique.
              The label can be a positive integer, a negative integer or a string.
              Integer values between 0 and 255 and strings of length 1 are designated as Standards Track Document required.
              Integer values from 256 to 65535 and strings of length 2 are designated as Specification Required.
              Integer values of greater than 65535 and strings of length greater than 2 are designated as first come first server.
              Integer values in the range -1 to -65536 are used for key parameters specific to a single algorithm delegated to the “COSE Key Parameter Label” registry.
              Integer values beyond -65536 are marked as private use.
            </t>
            <t hangText='CBOR Type'>
              This field contains the CBOR type for the field
            </t>
            <t hangText='registry'>
              This field denotes the registry that values come from, if one exists.
            </t>
            <t hangText='description'>
              This field contains a brief description for the field
            </t>
            <t hangText='specification'>
              This contains a pointer to the public specification for the field if one exists
            </t>
          </list>
        </t>

        <t>
          This registry will be initially populated by the values in <xref target="COSE_KEY_KEYS"/>.
          The specification column for all of these entries will be this document.
        </t>

      </section>
      <section anchor="cose-key-parameter-registry" title="COSE Key Parameter Registry">

        <t>
          It is requested that IANA create a new registry “COSE Key Parameters”.
        </t>

        <t>
          The columns of the table are:
        </t>

        <t>
          <list style="hanging">
            <t hangText='key type'>
              This field contains a descriptive string of a key type. 
              This should be a value that is in the COSE General Values table and is placed in the 'kty' field of a COSE Key structure.
            </t>
            <t hangText='name'>
              This is a descriptive name that enables easier reference to the item.  It is not used in the encoding.
            </t>
            <t hangText='label'>
              The label is to be unique for every value of key type. 
              The range of values is from -256 to -1.
              Labels are expected to be reused for different keys.
            </t>
            <t hangText='CBOR type'>
              This field contains the CBOR type for the field
            </t>
            <t hangText='description'>
              This field contains a brief description for the field
            </t>
            <t hangText='specification'>
              This contains a pointer to the public specification for the field if one exists
            </t>
          </list>
        </t>

        <t>
          This registry will be initially populated by the values in <xref target="COSE_KEY_PARAM_KEYS"/>.
  The specification column for all of these entries will be this document.
        </t>

      </section>

      <section title="Media Type Registration">

        <section title="COSE Security Message">

          <t>
            This section registers the "application/cose" and "application/cose+cbor" media types in the "Media Types" registry.
            <cref source="JLS">Should we register both or just the cose+cbor one?</cref>
            These media types are used to indicate that the content is a COSE_MSG.
          </t>

          <t>
          <list style="none">
            <t>Type name: application</t>
            <t>Subtype name: cose</t>
            <t>Required parameters: N/A</t>
            <t>Optional parameters: N/A</t>
            <t>Encoding considerations: binary</t>
            <t>Security considerations: See the Security Considerations section of RFC TBD.</t>
            <t>Interoperability considerations: N/A</t>
            <t>Published specification: RFC TBD</t>
            <t>Applications that use this media type: To be identified</t>
            <t>Fragment identifier considerations: N/A</t>
            <t>Additional information:
            <list style="symbols">
              <t>Magic number(s): N/A</t>
              <t>File extension(s): cbor</t>
              <t>Macintosh file type code(s): N/A</t>
            </list>
            </t>
            <t>Person &amp; email address to contact for further information: iesg@ietf.org</t>
            <t>Intended usage: COMMON</t>
            <t>Restrictions on usage: N/A</t>
            <t>Author: Jim Schaad, ietf@augustcellars.com</t>
            <t>Change Controller: IESG</t>
            <t>Provisional registration?  No</t>
          </list>
          </t>

          <t>
          <list style="non">
            <t>Type name: application</t>
            <t>Subtype name: cose+cbor</t>
            <t>Required parameters: N/A</t>
            <t>Optional parameters: N/A</t>
            <t>Encoding considerations: binary</t>
            <t>Security considerations: See the Security Considerations section of RFC TBD.</t>
            <t>Interoperability considerations: N/A</t>
            <t>Published specification: RFC TBD</t>
            <t>Applications that use this media type: To be identified</t>
            <t>Fragment identifier considerations: N/A</t>
            <t>Additional information:
            <list style="symbols">
              <t>Magic number(s): N/A</t>
              <t>File extension(s): cbor</t>
              <t>Macintosh file type code(s): N/A</t>
            </list>
            </t>
            <t>Person &amp; email address to contact for further information: iesg@ietf.org</t>
            <t>Intended usage: COMMON</t>
            <t>Restrictions on usage: N/A</t>
            <t>Author: Jim Schaad, ietf@augustcellars.com</t>
            <t>Change Controller: IESG</t>
            <t>Provisional registration?  No</t>
          </list>
          </t>

        </section>
        <section title="COSE Key media type">

          <t>
            This section registers the "application/cose+json" and "application/cose-set+json" media types in the "Media Types" registry.
            These media types are used to indicate, respectively, that content is a COSE_Key or COSE_KeySet object.
          </t>

          <t>
          <list style="non">
            <t>Type name: application</t>
            <t>Subtype name: cose-key+cbor</t>
            <t>Required parameters: N/A</t>
            <t>Optional parameters: N/A</t>
            <t>Encoding considerations: binary</t>
            <t>Security considerations: See the Security Considerations section of RFC TBD.</t>
            <t>Interoperability considerations: N/A</t>
            <t>Published specification: RFC TBD</t>
            <t>Applications that use this media type: To be identified</t>
            <t>Fragment identifier considerations: N/A</t>
            <t>Additional information:
            <list style="symbols">
              <t>Magic number(s): N/A</t>
              <t>File extension(s): cbor</t>
              <t>Macintosh file type code(s): N/A</t>
            </list>
            </t>
            <t>Person &amp; email address to contact for further information: iesg@ietf.org</t>
            <t>Intended usage: COMMON</t>
            <t>Restrictions on usage: N/A</t>
            <t>Author: Jim Schaad, ietf@augustcellars.com</t>
            <t>Change Controller: IESG</t>
            <t>Provisional registration?  No</t>
          </list>
          </t>

          <t>
          <list style="none">
            <t>Type name: application</t>
            <t>Subtype name: cose-key-set+cbor</t>
            <t>Required parameters: N/A</t>
            <t>Optional parameters: N/A</t>
            <t>Encoding considerations: binary</t>
            <t>Security considerations: See the Security Considerations section of RFC TBD.</t>
            <t>Interoperability considerations: N/A</t>
            <t>Published specification: RFC TBD</t>
            <t>Applications that use this media type: To be identified</t>
            <t>Fragment identifier considerations: N/A</t>
            <t>Additional information:
            <list style="symbols">
              <t>Magic number(s): N/A</t>
              <t>File extension(s): cbor</t>
              <t>Macintosh file type code(s): N/A</t>
            </list>
            </t>
            <t>Person &amp; email address to contact for further information: iesg@ietf.org</t>
            <t>Intended usage: COMMON</t>
            <t>Restrictions on usage: N/A</t>
            <t>Author: Jim Schaad, ietf@augustcellars.com</t>
            <t>Change Controller: IESG</t>
            <t>Provisional registration?  No</t>
          </list>
          </t>
        </section>
      </section>
    </section>
    <section anchor="security-considerations" title="Security Considerations">

      <t>
        There are security considerations:
      </t>

      <t>
        <list style="numbers">
          <t>
            Protect private keys
          </t>
          <t>
            MAC messages with more than one recipient means one cannot figure out who sent the message
          </t>
          <t>
            Use of direct key with other recipient structures hands the key to other recipients.
          </t>
          <t>
            Use of direct ECDH direct encryption is easy for people to leak information on if there are other recipients in the message.
          </t>
          <t>
            Considerations about protected vs unprotected header fields.
          </t>
        </list>
      </t>

    </section>


  </middle>

  <back>

    <references title='Normative References'>
      &RFC2119;
      &RFC7049;
    </references>

    <references title='Informative References'>
      &CDDL;
      &CBCMAC;
      &RFC2104;
      &RFC3394;
      &RFC3447;
      &RFC3610;
      &RFC4231;
      &RFC5480;
      &RFC5652;
      &RFC5752;
      &RFC5869;
      &RFC5990;
      &RFC6090;
      &RFC6151;
      &RFC7159;
      &RFC7515;
      &RFC7516;
      &RFC7517;
      &RFC7518;
      
      &CFRG-EC;

      <reference anchor="AES-GCM" >
        <front>
          <title>NIST Special Publication 800-38D: Recommendation for Block Cipher Modes of Operation: Galois/Counter Mode (GCM) and GMAC.</title>
          <author initials="M." surname="Dworkin">
            <organization>U.S. National Institute of Standards and Technology</organization>
          </author>
          <date year="2007" month="Nov"/>
        </front>
        <format target="https://csrc.nist.gov/publications/nistpubs/800-38D/SP-800-38D.pdf" type="PDF"/>
      </reference>

      <reference anchor="DSS">
        <front>
          <title>Digital Signature Standard (DSS)</title>
          <author>
            <organization>U.S. National Institute of Standards and Technology</organization>
          </author>
          <date year="2013" month="July"/>
        </front>
        <format target="http://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-4.pdf" type="PDF"/>
      </reference>

      <reference anchor="SP800-56A">
        <front>
          <title>NIST Special Publication 800-56A: Recommendation for Pair-Wise Key Establishment Schemes Using Discrete Logarithm Cryptography</title>
          <author initials="E." surname="Barker">
            <organization>U.S. National Institute of Standards and Technology</organization>
          </author>
          <author initials="L." surname="Chen">
            <organization>U.S. National Institute of Standards and Technology</organization>
          </author>
          <author initials="A." surname="Roginsky">
            <organization>U.S. National Institute of Standards and Technology</organization>
          </author>
          <author initials="M." surname="Smid">
            <organization>Orion Security Solutions, Inc.</organization>
          </author>
          <date year="2013" month="May"/>
        </front>
        <format target="https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-56Ar2.pdf" type="PDF"/>
      </reference>

      <reference anchor="SEC1">
        <front>
          <title>SEC 1: Elliptic Curve Cryptography</title>
          <author>
            <organization>Standards for Efficient Cryptography Group</organization>
          </author>
          <date year="2009" month="May"/>
        </front>
        <format target="http://www.secg.org/sec1-v2.pdf" type="PDF"/>
      </reference>

    </references>


    <section anchor="AE-algo" title="AEAD and AE algorithms">

      <t>
        The set of encryption algorithms that can be used with this
        specification is restricted to authenticated encryption (AE) and
        authenticated encryption with additional data (AEAD) algorithms.
        This means that there is a strong check that the data decrypted by the
        recipient is the same as what was encrypted by the sender.
        Encryption modes such as counter have no check on this at all.
        The CBC encryption mode had a weak check that the data is correct,
        given a random key and random data, the CBC padding check will pass
        one out of 256 times.
        There have been several times that a normal encryption mode has been
        combined with an integrity check to provide a content encryption mode
        that does provide the necessary authentication.
        AES-GCM <xref target="AES-GCM"/>, AES-CCM <xref target="RFC3610"/>, AES-CBC-HMAC
        <xref target="I-D.mcgrew-aead-aes-cbc-hmac-sha2"/> are  examples of these composite
        modes.
      </t>

      <t>
        PKCS v1.5 RSA key transport does not qualify as an AE algorithm.
        There are only three bytes in the encoding that can be checked as
        having decrypted correctly, the rest of the content can only be
        probabilistically checked as having decrypted correctly.
        For this reason, PKCS v1.5 RSA key transport MUST NOT be used with
        this specification.
        RSA-OAEP was designed to have the necessary checks that that content
        correctly decrypted and does qualify as an AE algorithm.
      </t>

      <t>
        When dealing with authenticated encryption algorithms, there is always some type of value that needs to be checked to see if the authentication level has passed.
        This authentication value may be:
      </t>

      <t>
        <list style="symbols">
          <t>
            A separately generated tag computed by both the encrypter and decrypter and then compared by the decryptor.
            This tag value may be either placed at the end of the cipher text (the decision we made) or kept separately (the decision made by the JOSE working group).
            This is the approach followed by AES-GCM <xref target="AES-GCM"/> and AES-CCM <xref target="RFC3610"/>.
            <!-- Mike Jones:  Last sentence is not clear.  He is reading this as referring to ? rather than just being generating a tag. - M00TODO -->
          </t>
          <t>
            A fixed value that is part of the encoded plain text.
            This is the approach followed by the AES key wrap algorithm <xref target="RFC3394"/>.
          </t>
          <t>
            A computed value is included as part of the encoded plain text.
            The computed value is then checked by the decryptor using the same computation path.
            This is the approach followed by RSAES-OAEP <xref target="RFC3447"/>.
          </t>
        </list>
      </t>

    </section>
    
    <section anchor="three-layer" title="Three Levels of Recipient Information">

      <t>
        All of the currently defined Key Management methods only use two levels of the COSE_Encrypt structure.
        The first level is the message content and the second level is the content key encryption.
        However, if one uses a key management technique such as RSA-KEM (see Appendix A of RSA-KEM <xref target="RFC5990"/>, then
        it make sense to have three levels of the COSE_Encrypt structure.
      </t>

      <t>
        These levels would be:

        <list style="symbols">
          <t>
            Level 0: The content encryption level.  This level contains the payload of the message.
          </t>
          <t>
            Level 1: The encryption of the CEK by a KEK.
          </t>
          <t>
            Level 2: The encryption of a long random secret using an RSA key and a key derivation function to convert that secret into the KEK.
          </t>
        </list>
      </t>

      <t>
        This is an example of what a triple layer message would look like.
        The message has the following layers:

        <list style="symbols">
          <t>
            Level 0: Has a content encrypted with AES-GCM using a 128-bit key.
          </t>
          <t>
            Level 1: Uses the AES Key wrap algorithm with a 128-bit key.
          </t>
          <t>
            Level 3: Uses ECDH Ephemeral-Static direct to generate the level 1 key.
          </t>
        </list>

        In effect this example is a decomposed version of using the ECDH-ES+A128KW algorithm.
      </t>

      &Triple-01;

    </section>


    <section anchor="examples" title="Examples">

      <t>
        The examples can be found at https://github.com/cose-wg/Examples.  I am currently still in the process of getting the examples up there along with some control information for people to be able to check and reproduce the examples.
      </t>

      <section anchor="Mac-01" title="Direct MAC">

        <t>
          This example has some features that are in questions but not yet incorporated in the document.
        </t>

        <t>
          To make it easier to read, this uses CBOR's diagnostic notation rather than a binary dump.
        </t>

        <t>
          This example is uses HMAC with SHA-256 as the digest algorithm.  The key management is uses two static ECDH keys along with HKDF to directly derive the key used in the HMAC operation.
        </t>

        &Mac-01;

      </section>
      <section anchor="Mac-02" title="Wrapped MAC">

        <t>
          This example has some features that are in questions but not yet incorporated in the document.
        </t>

        <t>
          To make it easier to read, this uses CBOR's diagnostic notation rather than a binary dump.
        </t>

        <t>
          This example uses AES-128-MAC truncated to 64-bits as the digest algorithm.  It uses AES-256 Key wrap for the key management algorithm wrapping the 128-bit key used for the digest algorithm.
        </t>

        &Mac-02;

      </section>
      <section anchor="Mac-03" title="Multi-recipient MAC message">

        <t>
          This example has some features that are in questions but not yet incorporated in the document.
        </t>

        <t>
          To make it easier to read, this uses CBOR's diagnostic notation rather than a binary dump.
        </t>

        <t>
          This example uses HMAC with SHA-256 for the digest algorithm.  There are three different key management techniques applied:
        </t>

        <t>
          <list style="symbols">
            <t>
              An ephemeral static ECDH key agreement operation using AES-128 key wrap on the digest key.
            </t>
            <t>
              Key transport using RSA-OAEP with SHA-256 for the hash and the mfg function operations.
            </t>
            <t>
              AES 256-bit Key wrap using a pre-shared secret.
            </t>
          </list>
        </t>

        &Mac-03;

      </section>

      
      <section anchor="Enc-01" title="Direct ECDH">

        <t>
          This example has some features that are in questions but not yet incorporated in the document.
        </t>

        <t>
          To make it easier to read, this uses CBOR's diagnostic notation rather than a binary dump.
        </t>

        <t>
          Encoded in CBOR - 216 bytes, content is 14 bytes long
        </t>

        &Enc-01;

      </section>

      
      <section anchor="Sig-01" title="Single Signature">

        <t>
          This example has some features that are in questions but not yet cooperated in the document.
        </t>

        <t>
          To make it easier to read, this uses CBOR's diagnostic notation rather than a binary dump.
        </t>

        &Sig-01;

      </section>


      <section anchor="Sig-02" title="Multiple Signers">

        <t>
          This example has some features that are in questions but not yet cooperated in the document.
        </t>

        <t>
          To make it easier to read, this uses CBOR's diagnostic notation rather than a binary dump.
        </t>

        <t>
          Encoded in CBOR - 491 bytes, content is 14 bytes long
        </t>

        &Sig-02;

      </section>
    </section>

    <section anchor="Header-Algorithm-Table" title="COSE Header Algorithm Label Table">

      <texttable>
        <ttcol align='left'>name</ttcol>
        <ttcol align='left'>algorithm</ttcol>
        <ttcol align='left'>label</ttcol>
        <ttcol align='left'>CBOR type</ttcol>
        <ttcol align='left'>description</ttcol>
        <c>apu</c>        <c>ECDH</c>        <c>-1</c>        <c>bstr</c>        <c></c>
        <c>apv</c>        <c>ECDH</c>        <c>-2</c>        <c>bstr</c>        <c></c>
        <c>epk</c>        <c>ECDH</c>        <c>-3</c>        <c>COSE_Key</c>    <c>contains a COSE key not a JWK key</c>
        <c>iv</c>         <c>A128GCMKW, A192GCMKW, A256GCMKW</c>        <c>-1</c>        <c>bstr</c>        <c></c>
        <c>iv</c>         <c>A128GCM, A192GCM, A256GCM</c>        <c>-1</c>        <c>bstr</c>        <c></c>
        <c>p2c</c>        <c>PBE</c>        <c>-1</c>        <c>int</c>        <c></c>
        <c>p2s</c>        <c>PBE</c>        <c>-2</c>        <c>bstr</c>        <c></c>
      </texttable>

    </section>
    <section anchor="ALG_TABLE" title="COSE Algorithm Name Values">

      <t>
        This table contains all of the defined algorithms for COSE.
      </t>

      <texttable>
        <ttcol align='left'>name</ttcol>
        <ttcol align='left'>value</ttcol>
        <ttcol align='left'>description</ttcol>
        <c>RS256</c>        <c>*</c>        <c>RSASSA-v1.5 w/ SHA-256</c>
        <c>RS384</c>        <c>*</c>        <c>RSASSA-v1.5 w/ SHA-384</c>
        <c>RSA512</c>       <c>*</c>        <c>RSASSA-v1.5 w/ SHA-256</c>
        <c>RSA1_5</c>       <c>*</c>        <c>RSAES v1.5 Key Encryption</c>
        <c>A128GCMKW</c>        <c>*</c>        <c>AES GCM Key Wrap w/ 128 bit key</c>
        <c>A192GCMKW</c>        <c>*</c>        <c>AES GCM Key Wrap w/ 192 bit key</c>
        <c>A256GCMKW</c>        <c>*</c>        <c>AES GCM Key Wrap w/ 256 bit key</c>
      </texttable>

    </section>
    <section anchor="cose-general-values" title="COSE General Values">

      <texttable>
        <ttcol align='left'>name</ttcol>
        <ttcol align='left'>number</ttcol>
        <ttcol align='left'>description</ttcol>
        
        <c>EC</c>        <c>1</c>        <c>Elliptic Curve key Type</c>
        <c>RSA</c>        <c>2</c>        <c>RSA Key type</c>
        <c>oct</c>        <c>3</c>        <c>Octet Key type</c>
        <c>P256</c>        <c>4</c>        <c>EC Curve P256 (NIST)</c>
        <c>P521</c>        <c>5</c>        <c>EC Curve P521 (NIST)</c>
      </texttable>
      
    </section>
    <section anchor="COSE_KEY_PARAM_KEYS" title="COSE Key Parameter Labels">

      <t>
        This table contains a list of all of the parameters that were defined by the JOSE document set for a specific key type. 
        In the table is the data value type to be used for CBOR as well as the integer value that can be used as a replacement for the name in order to further decrease the size of the sent item.
        Parameters dealing with keys
      </t>

      <texttable>
        <ttcol align='left'>key type</ttcol>
        <ttcol align='left'>name</ttcol>
        <ttcol align='left'>label</ttcol>
        <ttcol align='left'>CBOR type</ttcol>
        <ttcol align='left'>registry</ttcol>
        <ttcol align='left'>description</ttcol>
        
        <c>EC</c>        <c>crv</c>        <c>-1</c>        <c>int / tstr</c>        <c>Pull from general value registry</c>        <c></c>
        <c>EC</c>        <c>x</c>        <c>-2</c>        <c>bstr</c>        <c></c>        <c></c>
        <c>EC</c>        <c>y</c>        <c>-3</c>        <c>bstr</c>        <c></c>        <c></c>
        <c>EC</c>        <c>d</c>        <c>-4</c>        <c>bstr</c>        <c></c>        <c></c>
        <c>RSA</c>        <c>e</c>        <c>-1</c>        <c>bstr</c>        <c></c>        <c></c>
        <c>RSA</c>        <c>n</c>        <c>-2</c>        <c>bstr</c>        <c></c>        <c></c>
        <c>RSA</c>        <c>d</c>        <c>-3</c>        <c>bstr</c>        <c></c>        <c></c>
        <c>RSA</c>        <c>p</c>        <c>-4</c>        <c>bstr</c>        <c></c>        <c></c>
        <c>RSA</c>        <c>q</c>        <c>-5</c>        <c>bstr</c>        <c></c>        <c></c>
        <c>RSA</c>        <c>dp</c>        <c>-6</c>        <c>bstr</c>        <c></c>        <c></c>
        <c>RSA</c>        <c>dq</c>        <c>-7</c>        <c>bstr</c>        <c></c>        <c></c>
        <c>RSA</c>        <c>qi</c>        <c>-8</c>        <c>bstr</c>        <c></c>        <c></c>
        <c>RSA</c>        <c>oth</c>        <c>-9</c>        <c>bstr</c>        <c></c>        <c></c>
        <c>RSA</c>        <c>r</c>        <c>-10</c>        <c>bstr</c>        <c></c>        <c></c>
        <c>RSA</c>        <c>t</c>        <c>-11</c>        <c>bstr</c>        <c></c>        <c></c>
        <c>oct</c>        <c>k</c>        <c>-1</c>        <c>bstr</c>        <c></c>        <c></c>
      </texttable>

    </section>


  </back>
</rfc>
